{"version":3,"file":"hosted-credit-card-payment-method-ce7f7766.js","mappings":"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","sources":["webpack://checkout/./packages/hosted-credit-card-integration/src/HostedCreditCardPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/HostedCreditCardPaymentMethod.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/hooks/useHostedCreditCard.tsx"],"sourcesContent":["import React, { type FunctionComponent } from 'react';\n\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport { HostedCreditCardComponent } from './components';\n\nconst HostedCreditCardPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    language,\n    onUnhandledError,\n}) => {\n    return (\n        <HostedCreditCardComponent\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            language={language}\n            method={method}\n            onUnhandledError={onUnhandledError}\n            paymentForm={paymentForm}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    HostedCreditCardPaymentMethod,\n    [\n        {\n            id: 'hosted-credit-card',\n        },\n        { id: 'credit_card', gateway: 'bluesnapdirect' },\n        { id: 'credit_card', gateway: 'checkoutcom' },\n\n        { id: 'tdonlinemart' },\n    ],\n);\n","import React, { type FunctionComponent, useCallback } from 'react';\n\nimport {\n    withHostedCreditCardFieldset,\n    type WithInjectedHostedCreditCardFieldsetProps,\n} from '../hostedCreditCard';\n\nimport CreditCardPaymentMethod, { type CreditCardPaymentMethodProps } from './CreditCardPaymentMethod';\n\nexport type HostedCreditCardPaymentMethodProps = Omit<\n    CreditCardPaymentMethodProps,\n    | 'cardFieldset'\n    | 'cardValidationSchema'\n    | 'storedCardValidationSchema'\n    | 'getStoredCardValidationFieldset'\n>;\n\nconst HostedCreditCardPaymentMethod: FunctionComponent<\n    HostedCreditCardPaymentMethodProps & WithInjectedHostedCreditCardFieldsetProps\n> = ({\n    getHostedFormOptions,\n    getHostedStoredCardValidationFieldset,\n    hostedFieldset,\n    hostedStoredCardValidationSchema,\n    hostedValidationSchema,\n    initializePayment,\n    ...rest\n}) => {\n    const initializeHostedCreditCardPayment: CreditCardPaymentMethodProps['initializePayment'] =\n        useCallback(\n            async (options, selectedInstrument) => {\n                return initializePayment({\n                    ...options,\n                    creditCard: getHostedFormOptions && {\n                        form: await getHostedFormOptions(selectedInstrument),\n                    },\n                });\n            },\n            [getHostedFormOptions, initializePayment],\n        );\n\n    return (\n        <CreditCardPaymentMethod\n            {...rest}\n            cardFieldset={hostedFieldset}\n            cardValidationSchema={hostedValidationSchema}\n            getStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n            initializePayment={initializeHostedCreditCardPayment}\n            storedCardValidationSchema={hostedStoredCardValidationSchema}\n        />\n    );\n};\n\nexport default withHostedCreditCardFieldset(HostedCreditCardPaymentMethod);\n","import {\n    type CardInstrument,\n    type CheckoutSelectors,\n    type LanguageService,\n    type LegacyHostedFormOptions,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { compact, forIn } from 'lodash';\nimport React, { type ReactNode, useCallback, useState } from 'react';\n\nimport {\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { type PaymentFormService } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { HostedCreditCardValidation } from '../components';\n\nexport interface UseHostedFormOptions {\n    checkoutState: CheckoutSelectors;\n    language: LanguageService;\n    method: PaymentMethod;\n    paymentForm: PaymentFormService;\n}\n\nexport const useHostedCreditCard = ({\n    checkoutState,\n    method,\n    language,\n    paymentForm,\n}: UseHostedFormOptions) => {\n    const { setFieldTouched, setFieldValue, setSubmitted, submitForm } = paymentForm;\n    const { config } = method;\n    const { cardCode: requireCardCode } = config;\n\n    const isCardCodeRequired = requireCardCode || requireCardCode === null;\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n\n    const getHostedStoredCardValidationFieldset: (selectedInstrument: CardInstrument) => ReactNode =\n        useCallback(\n            (selectedInstrument) => {\n                const isInstrumentCardNumberRequired = selectedInstrument\n                    ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                    : false;\n                const isInstrumentCardCodeRequired = selectedInstrument\n                    ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                    : false;\n\n                return (\n                    <HostedCreditCardValidation\n                        cardCodeId={\n                            isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                        }\n                        cardNumberId={\n                            isInstrumentCardNumberRequired\n                                ? getHostedFieldId('ccNumber')\n                                : undefined\n                        }\n                        focusedFieldType={focusedFieldType}\n                    />\n                );\n            },\n            [\n                focusedFieldType,\n                getHostedFieldId,\n                isInstrumentCardCodeRequiredProp,\n                isInstrumentCardNumberRequiredProp,\n                method,\n            ],\n        );\n\n    const getHostedFormOptions = useCallback(\n        async (selectedInstrument: CardInstrument): Promise<LegacyHostedFormOptions> => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n            let styleContainerId;\n\n            if (selectedInstrument) {\n                if (isInstrumentCardCodeRequired) {\n                    styleContainerId = getHostedFieldId('ccCvv');\n                } else if (isInstrumentCardNumberRequired) {\n                    styleContainerId = getHostedFieldId('ccNumber');\n                }\n            } else {\n                styleContainerId = getHostedFieldId('ccNumber');\n            }\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification:\n                              isInstrumentCardCodeRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_cvv_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccCvv'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                          cardNumberVerification:\n                              isInstrumentCardNumberRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_number_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccNumber'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_name_label',\n                              ),\n                              containerId: getHostedFieldId('ccName'),\n                          },\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors = [], fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(errorKey, fieldErrors[0]?.type ?? '');\n\n                        if (fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldTouched,\n            setFieldValue,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n\n    return { getHostedStoredCardValidationFieldset, getHostedFormOptions };\n};\n"],"names":["method","checkoutService","checkoutState","paymentForm","language","onUnhandledError","id","gateway","getHostedFormOptions","getHostedStoredCardValidationFieldset","hostedFieldset","hostedStoredCardValidationSchema","hostedValidationSchema","initializePayment","rest","initializeHostedCreditCardPayment","useCallback","options","selectedInstrument","creditCard","form","cardFieldset","cardValidationSchema","getStoredCardValidationFieldset","storedCardValidationSchema","useHostedCreditCard","setFieldTouched","setFieldValue","setSubmitted","submitForm","config","cardCode","requireCardCode","isCardCodeRequired","isInstrumentCardCodeRequiredProp","isInstrumentCardNumberRequiredProp","getHostedFieldId","name","compact","join","focusedFieldType","setFocusedFieldType","useState","isInstrumentCardNumberRequired","isInstrumentCardCodeRequired","cardCodeId","undefined","cardNumberId","styleProps","styleContainerId","fields","cardCodeVerification","accessibilityLabel","translate","containerId","instrumentId","bigpayToken","cardNumberVerification","cardExpiry","placeholder","cardName","cardNumber","styles","default","error","Error","focus","Focus","onBlur","fieldType","onCardTypeChange","cardType","onEnter","onFocus","onValidate","errors","forIn","fieldErrors","errorKey","type"],"sourceRoot":""}