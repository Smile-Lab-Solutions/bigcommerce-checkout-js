{"version":3,"file":"3874-6b206629.js","mappings":"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","sources":["webpack://checkout/./packages/bigcommerce-payments-integration/src/hooks/useBigCommercePaymentsInstruments.ts","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePayments/BigCommercePaymentsPaymentMethod.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsPayLater/BigCommercePaymentsPayLaterPaymentMethod.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsAPMs/BigCommercePaymentsAPMsPaymentMethod.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/components/BigCommercePaymentsPaymentMethodComponent.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsFastlane/hooks/useBigCommercePaymentsFastlaneInstruments.ts","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsFastlane/components/BigCommercePaymentsFastlaneCreditCardForm.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsFastlane/components/BigCommercePaymentsFastlaneInstrumentsForm.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsFastlane/components/BigCommercePaymentsFastlaneForm.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsFastlane/BigCommercePaymentsFastlanePaymentMethod.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsFastlane/index.ts","webpack://checkout/./packages/utility/src/is-error-with-translation-key.ts","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsVenmo/BigCommercePaymentsVenmoPaymentMethod.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/validation-schemas/getBigCommercePaymentsRatePayValidationSchema.ts","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsRatePay/BigCommercePaymentsRatePayPaymentMethod.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentCreditCards/BigCommercePaymentsCreditCardsPaymentMethod.tsx"],"sourcesContent":["import { AccountInstrument, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find } from 'lodash';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { isAccountInstrument } from '@bigcommerce/checkout/instrument-utils';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nconst useBigCommercePaymentsInstrument = (method: PaymentMethod) => {\n    const [currentInstrument, setCurrentInstrument] = useState<AccountInstrument | undefined>();\n\n    const { checkoutState } = useCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const { paymentForm } = usePaymentFormContext();\n    const { setFieldValue } = paymentForm;\n\n    const accountInstruments = useMemo(\n        () => instruments.filter(isAccountInstrument),\n        [instruments],\n    );\n\n    const trustedAccountInstruments = useMemo(\n        () => accountInstruments.filter((instrument) => instrument.trustedShippingAddress),\n        [accountInstruments],\n    );\n\n    const hasAccountInstruments = accountInstruments.length > 0;\n\n    const isInstrumentFeatureAvailable =\n        !customer?.isGuest &&\n        Boolean(method.config.isVaultingEnabled) &&\n        !method.initializationData.isComplete;\n    const shouldShowInstrumentFieldset = isInstrumentFeatureAvailable && hasAccountInstruments;\n\n    const shouldCreateNewInstrument = shouldShowInstrumentFieldset && !currentInstrument;\n    const shouldConfirmInstrument =\n        shouldShowInstrumentFieldset && !!currentInstrument && !trustedAccountInstruments.length;\n\n    const getDefaultInstrument = (): AccountInstrument | undefined => {\n        if (!trustedAccountInstruments.length) {\n            return;\n        }\n\n        const defaultAccountInstrument = trustedAccountInstruments.filter(\n            ({ defaultInstrument }) => defaultInstrument,\n        );\n\n        return defaultAccountInstrument[0] || trustedAccountInstruments[0];\n    };\n\n    useEffect(() => {\n        setCurrentInstrument(isInstrumentFeatureAvailable ? getDefaultInstrument() : undefined);\n    }, [isInstrumentFeatureAvailable, trustedAccountInstruments]);\n\n    useEffect(() => {\n        if (!shouldShowInstrumentFieldset) {\n            setFieldValue('instrumentId', '');\n        }\n    }, [setFieldValue, shouldShowInstrumentFieldset]);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setCurrentInstrument(find(trustedAccountInstruments, { bigpayToken: id }));\n            setFieldValue('instrumentId', id);\n            setFieldValue('shouldSetAsDefaultInstrument', false);\n        },\n        [trustedAccountInstruments, setFieldValue],\n    );\n\n    const handleUseNewInstrument = useCallback(() => {\n        setCurrentInstrument(undefined);\n        setFieldValue('instrumentId', '');\n        setFieldValue('shouldSaveInstrument', false);\n        setFieldValue('shouldSetAsDefaultInstrument', false);\n    }, [setFieldValue]);\n\n    return {\n        trustedAccountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n        shouldConfirmInstrument,\n    };\n};\n\nexport default useBigCommercePaymentsInstrument;\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedHtml } from '@bigcommerce/checkout/locale';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport BigCommercePaymentsPaymentMethodComponent from '../components/BigCommercePaymentsPaymentMethodComponent';\nimport useBigCommercePaymentsInstrument from '../hooks/useBigCommercePaymentsInstruments';\n\nconst BigCommercePaymentsPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const {\n        checkoutState: {\n            data: { isPaymentDataRequired, getCustomer, getInstruments },\n            statuses: { isLoadingInstruments, isLoadingPaymentMethod },\n        },\n        method: {\n            config: { isVaultingEnabled },\n            initializationData: { ...isComplete },\n        },\n        method,\n        checkoutService,\n        onUnhandledError,\n    } = props;\n\n    const {\n        trustedAccountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldConfirmInstrument,\n    } = useBigCommercePaymentsInstrument(method);\n\n    useEffect(() => {\n        const loadInstrumentsOrThrow = async () => {\n            try {\n                await checkoutService.loadInstruments();\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        const { isGuest } = getCustomer() || {};\n\n        const shouldLoadInstruments = !isGuest && isVaultingEnabled && !isComplete;\n\n        if (shouldLoadInstruments) {\n            void loadInstrumentsOrThrow();\n        }\n    });\n\n    if (!isPaymentDataRequired()) {\n        return null;\n    }\n\n    const isLoading = isLoadingInstruments() || isLoadingPaymentMethod(method.id);\n    const allInstruments = getInstruments() || [];\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <BigCommercePaymentsPaymentMethodComponent\n                currentInstrument={currentInstrument}\n                providerOptionsKey=\"bigcommerce_payments\"\n                shouldConfirmInstrument={shouldConfirmInstrument}\n                {...props}\n            >\n                {shouldShowInstrumentFieldset && (\n                    <AccountInstrumentFieldset\n                        instruments={trustedAccountInstruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewInstrument}\n                        selectedInstrument={currentInstrument}\n                    />\n                )}\n\n                {shouldConfirmInstrument && (\n                    <div>\n                        <TranslatedHtml id=\"payment.account_instrument_new_shipping_address\" />\n                    </div>\n                )}\n\n                {isInstrumentFeatureAvailable && (\n                    <StoreInstrumentFieldset\n                        instrumentId={currentInstrument?.bigpayToken}\n                        instruments={allInstruments}\n                        isAccountInstrument\n                    />\n                )}\n            </BigCommercePaymentsPaymentMethodComponent>\n        </LoadingOverlay>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BigCommercePaymentsPaymentMethod,\n    [{ id: 'bigcommerce_payments' }],\n);\n","import React, { FunctionComponent } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport BigCommercePaymentsPaymentMethodComponent from '../components/BigCommercePaymentsPaymentMethodComponent';\n\nconst BigCommercePaymentsPayLaterPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const { checkoutState } = props;\n    const isPaymentDataRequired = checkoutState.data.isPaymentDataRequired();\n\n    if (!isPaymentDataRequired) {\n        return null;\n    }\n\n    return (\n        <BigCommercePaymentsPaymentMethodComponent\n            providerOptionsKey=\"bigcommerce_payments_paylater\"\n            {...props}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BigCommercePaymentsPayLaterPaymentMethod,\n    [{ id: 'bigcommerce_payments_paylater' }],\n);\n","import React, { FunctionComponent } from 'react';\n\nimport {\n    getUniquePaymentMethodId,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport BigCommercePaymentsPaymentMethodComponent from '../components/BigCommercePaymentsPaymentMethodComponent';\n\nconst BigCommercePaymentsAPMsPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const { method, checkoutState } = props;\n    const isPaymentDataRequired = checkoutState.data.isPaymentDataRequired();\n\n    if (!isPaymentDataRequired) {\n        return null;\n    }\n\n    const widgetContainerId = getUniquePaymentMethodId(method.id, method.gateway);\n    const extraOptions = {\n        apmFieldsContainer: `#${widgetContainerId}`,\n        apmFieldsStyles: {\n            variables: {\n                fontFamily: 'Open Sans, Helvetica Neue, Arial, sans-serif',\n                colorBackground: 'transparent',\n                textColor: 'black',\n                fontSizeBase: '16px',\n                spacingUnit: '1rem',\n                borderColor: '#d9d9d9',\n                borderRadius: '4px',\n                borderWidth: '1px',\n            },\n            rules: {\n                '.Input': {\n                    backgroundColor: 'white',\n                    color: '#333',\n                    fontSize: '1rem',\n                },\n                '.Input:active': {\n                    color: '#4496f6',\n                },\n                '.Input--invalid': {\n                    color: '#ed6a6a',\n                },\n            },\n        },\n    };\n\n    return (\n        <BigCommercePaymentsPaymentMethodComponent\n            providerOptionsData={extraOptions}\n            providerOptionsKey=\"bigcommerce_payments_apms\"\n            {...props}\n        >\n            <div className={`widget widget--${method.id} payment-widget`} id={widgetContainerId} />\n        </BigCommercePaymentsPaymentMethodComponent>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BigCommercePaymentsAPMsPaymentMethod,\n    [{ gateway: 'bigcommerce_payments_apms' }],\n);\n","import {\n    AccountInstrument,\n    HostedInstrument,\n    BigCommercePaymentsPaymentInitializeOptions,\n    BigCommercePaymentsAlternativeMethodsPaymentInitializeOptions,\n    BigCommercePaymentsCreditCardsPaymentInitializeOptions,\n    BigCommercePaymentsVenmoPaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback, useEffect, useRef } from 'react';\n\nimport { PaymentMethodProps } from '@bigcommerce/checkout/payment-integration-api';\n\ntype BigCommercePaymentsProvidersPaymentInitializeOptions =\n    BigCommercePaymentsAlternativeMethodsPaymentInitializeOptions &\n        BigCommercePaymentsCreditCardsPaymentInitializeOptions &\n        BigCommercePaymentsPaymentInitializeOptions &\n        BigCommercePaymentsVenmoPaymentInitializeOptions;\n\ninterface BigCommercePaymentsPaymentMethodComponentProps {\n    providerOptionsKey: string;\n    providerOptionsData?: Partial<BigCommercePaymentsProvidersPaymentInitializeOptions>;\n    currentInstrument?: AccountInstrument;\n    shouldConfirmInstrument?: boolean;\n}\n\ninterface ButtonActions {\n    disable: () => void;\n    enable: () => void;\n}\n\nconst BigCommercePaymentsPaymentMethodComponent: FunctionComponent<\n    PaymentMethodProps & BigCommercePaymentsPaymentMethodComponentProps\n> = ({\n    method,\n    checkoutService,\n    paymentForm,\n    onUnhandledError,\n    providerOptionsKey,\n    providerOptionsData,\n    children,\n    currentInstrument,\n    language,\n    shouldConfirmInstrument,\n}) => {\n    const buttonActionsRef = useRef<ButtonActions | null>(null);\n    const fieldsValuesRef = useRef<HostedInstrument | null>(null);\n    const renderButtonRef = useRef<(() => void) | null>(null);\n    const hasPayPalButton = useRef(false);\n\n    const termsValue = paymentForm.getFieldValue('terms');\n    const shouldSaveInstrument = paymentForm.getFieldValue('shouldSaveInstrument');\n\n    const validateForm = async () => {\n        const validationErrors = await paymentForm.validateForm();\n\n        return Object.keys(validationErrors);\n    };\n\n    const validateButton = async () => {\n        if (!buttonActionsRef.current) return;\n\n        const keysValidation = await validateForm();\n\n        if (keysValidation.length) {\n            buttonActionsRef.current.disable();\n        } else {\n            buttonActionsRef.current.enable();\n        }\n    };\n\n    const togglePaypalButton = useCallback(() => {\n        if (currentInstrument && !shouldConfirmInstrument) {\n            paymentForm.hidePaymentSubmitButton(method, false);\n            hasPayPalButton.current = false;\n        } else if (!hasPayPalButton.current && renderButtonRef.current) {\n            paymentForm.hidePaymentSubmitButton(method, true);\n\n            setTimeout(() => {\n                renderButtonRef.current?.();\n\n                hasPayPalButton.current = true;\n            }, 0);\n        }\n    }, [currentInstrument]);\n\n    useEffect(() => {\n        togglePaypalButton();\n    }, [togglePaypalButton, renderButtonRef.current]);\n\n    useEffect(() => {\n        void validateButton();\n    }, [termsValue]);\n\n    useEffect(() => {\n        fieldsValuesRef.current = {\n            shouldSaveInstrument: shouldConfirmInstrument || Boolean(shouldSaveInstrument),\n        };\n    }, [shouldSaveInstrument, shouldConfirmInstrument]);\n\n    const initializePayment = async () => {\n        try {\n            await checkoutService.initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n                [providerOptionsKey]: {\n                    container: '#checkout-payment-continue',\n                    shouldRenderPayPalButtonOnInitialization: false,\n                    onRenderButton: () => {\n                        paymentForm.hidePaymentSubmitButton(method, true);\n                    },\n                    onInit: (onRenderButton: () => void) => {\n                        renderButtonRef.current = onRenderButton;\n                    },\n                    submitForm: () => {\n                        paymentForm.setSubmitted(true);\n                        paymentForm.submitForm();\n                    },\n                    onError: (error: Error) => {\n                        paymentForm.disableSubmit(method, true);\n\n                        if (error.message === 'INSTRUMENT_DECLINED') {\n                            onUnhandledError(\n                                new Error(language.translate('payment.errors.instrument_declined')),\n                            );\n                        } else {\n                            onUnhandledError(error);\n                        }\n                    },\n                    onValidate: async (resolve: () => void, reject: () => void): Promise<void> => {\n                        const keysValidation = await validateForm();\n\n                        if (keysValidation.length) {\n                            paymentForm.setSubmitted(true);\n                            keysValidation.forEach((key) => paymentForm.setFieldTouched(key));\n\n                            return reject();\n                        }\n\n                        return resolve();\n                    },\n                    onInitButton: async (actions: ButtonActions) => {\n                        buttonActionsRef.current = actions;\n                        await validateButton();\n                    },\n                    getFieldsValues: () => fieldsValuesRef.current,\n                    ...(providerOptionsData || {}),\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePayment = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePayment();\n\n        return () => {\n            void deinitializePayment();\n        };\n    }, []);\n\n    return children ? <>{children}</> : <></>;\n};\n\nexport default BigCommercePaymentsPaymentMethodComponent;\n","import { CardInstrument, PaymentProviderCustomer } from '@bigcommerce/checkout-sdk';\nimport { useState } from 'react';\n\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { isPayPalFastlaneCustomer } from '@bigcommerce/checkout/paypal-fastlane-integration';\n\nexport const useBigCommercePaymentsFastlaneInstruments = () => {\n    const [selectedInstrument, setSelectedInstrument] = useState<CardInstrument>();\n\n    const { getPaymentProviderCustomer } = useCheckout().checkoutState.data;\n\n    const paymentProviderCustomer: PaymentProviderCustomer = getPaymentProviderCustomer();\n    const paypalFastlaneCustomer = isPayPalFastlaneCustomer(paymentProviderCustomer)\n        ? paymentProviderCustomer\n        : {};\n\n    const { paymentForm } = usePaymentFormContext();\n\n    const handleSelectInstrument = (instrument: CardInstrument): void => {\n        setSelectedInstrument(instrument);\n        paymentForm.setFieldValue('instrumentId', instrument.bigpayToken);\n    };\n\n    return {\n        instruments: paypalFastlaneCustomer.instruments || [],\n        handleSelectInstrument,\n        selectedInstrument,\n    };\n};\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { BigCommercePaymentsFastlaneCardComponentRef } from '../BigCommercePaymentsFastlanePaymentMethod';\n\nimport './BigCommercePaymentsFastlaneCreditCardForm.scss';\n\ninterface BigCommercePaymentsFastlaneCreditCardFormProps {\n    renderPayPalCardComponent?: BigCommercePaymentsFastlaneCardComponentRef['renderPayPalCardComponent'];\n}\n\nconst BigCommercePaymentsFastlaneCreditCardForm: FunctionComponent<\n    BigCommercePaymentsFastlaneCreditCardFormProps\n> = ({ renderPayPalCardComponent }) => {\n    useEffect(() => {\n        if (typeof renderPayPalCardComponent === 'function') {\n            renderPayPalCardComponent('#big-commerce-payments-fastlane-cc-form-container');\n        }\n    }, [renderPayPalCardComponent]);\n\n    return (\n        <div\n            className=\"big-commerce-payments-fastlane-cc-form-container\"\n            data-test=\"big-commerce-payments-fastlane-cc-form-container\"\n            id=\"big-commerce-payments-fastlane-cc-form-container\"\n        />\n    );\n};\n\nexport default BigCommercePaymentsFastlaneCreditCardForm;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { PoweredByPayPalFastlaneLabel } from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { Button, ButtonSize, ButtonVariant, CreditCardIcon } from '@bigcommerce/checkout/ui';\n\nimport { BigCommercePaymentsFastlaneCardComponentRef } from '../BigCommercePaymentsFastlanePaymentMethod';\n\nimport './BigCommercePaymentsFastlaneInstrumentsForm.scss';\n\nfunction mapFromInstrumentCardType(type: string): string {\n    switch (type.toLowerCase()) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n            return 'diners-club';\n\n        case 'master_card':\n            return 'mastercard';\n\n        default:\n            return type;\n    }\n}\n\ninterface BigCommercePaymentsFastlaneInstrumentsFormProps {\n    selectedInstrument: CardInstrument;\n    onChange: BigCommercePaymentsFastlaneCardComponentRef['showPayPalCardSelector'];\n    handleSelectInstrument(instrument: CardInstrument): void;\n}\n\nconst BigCommercePaymentsFastlaneInstrumentsForm: FunctionComponent<\n    BigCommercePaymentsFastlaneInstrumentsFormProps\n> = ({ onChange, handleSelectInstrument, selectedInstrument }) => {\n    const cardType = mapFromInstrumentCardType(selectedInstrument.brand).toLowerCase();\n\n    const handleChange = async () => {\n        if (typeof onChange === 'function') {\n            const result = await onChange();\n\n            if (result) {\n                handleSelectInstrument(result);\n            }\n        }\n    };\n\n    return (\n        <div\n            className=\"big-commerce-payments-fastlane-instrument\"\n            data-test=\"big-commerce-payments-fastlane-instrument-form\"\n        >\n            <div>\n                <div className=\"big-commerce-payments-fastlane-instrument-details\">\n                    <CreditCardIcon cardType={cardType} />\n\n                    <div\n                        className=\"instrumentSelect-card\"\n                        data-test=\"big-commerce-fastlane-instrument-last4\"\n                    >\n                        {/* &#9679; is a ● */}\n                        <span>&#9679;&#9679;&#9679;&#9679; {selectedInstrument.last4}</span>\n                    </div>\n                </div>\n                <div className=\"big-commerce-payments-fastlane-instrument-branding\">\n                    <PoweredByPayPalFastlaneLabel />\n                </div>\n            </div>\n\n            <div className=\"big-commerce-payments-fastlane-instrument-change-action\">\n                <Button\n                    onClick={handleChange}\n                    size={ButtonSize.Tiny}\n                    testId=\"big-commerce-payments-fastlane-instrument-change\"\n                    variant={ButtonVariant.Secondary}\n                >\n                    <TranslatedString id=\"common.change_action\" />\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nexport default BigCommercePaymentsFastlaneInstrumentsForm;\n","import React, { FunctionComponent, useEffect } from 'react';\n\nimport { BigCommercePaymentsFastlaneCardComponentRef } from '../BigCommercePaymentsFastlanePaymentMethod';\nimport { useBigCommercePaymentsFastlaneInstruments } from '../hooks/useBigCommercePaymentsFastlaneInstruments';\n\nimport BigCommercePaymentsFastlaneCreditCardForm from './BigCommercePaymentsFastlaneCreditCardForm';\nimport BigCommercePaymentsFastlaneInstrumentsForm from './BigCommercePaymentsFastlaneInstrumentsForm';\n\ninterface BigCommercePaymentsFastlaneFormProps {\n    renderPayPalCardComponent?: BigCommercePaymentsFastlaneCardComponentRef['renderPayPalCardComponent'];\n    showPayPalCardSelector?: BigCommercePaymentsFastlaneCardComponentRef['showPayPalCardSelector'];\n}\n\nconst BigCommercePaymentsFastlaneForm: FunctionComponent<BigCommercePaymentsFastlaneFormProps> = ({\n    renderPayPalCardComponent,\n    showPayPalCardSelector,\n}) => {\n    const { instruments, handleSelectInstrument, selectedInstrument } =\n        useBigCommercePaymentsFastlaneInstruments();\n\n    const shouldShowInstrumentsForm = instruments.length > 0;\n\n    useEffect(() => {\n        if (!selectedInstrument && instruments.length > 0) {\n            handleSelectInstrument(instruments[0]);\n        }\n    }, [instruments, selectedInstrument, handleSelectInstrument]);\n\n    return (\n        <div className=\"paymentMethod paymentMethod--creditCard\">\n            {shouldShowInstrumentsForm && (\n                <BigCommercePaymentsFastlaneInstrumentsForm\n                    handleSelectInstrument={handleSelectInstrument}\n                    onChange={showPayPalCardSelector}\n                    selectedInstrument={selectedInstrument || instruments[0]}\n                />\n            )}\n\n            {!shouldShowInstrumentsForm && (\n                <BigCommercePaymentsFastlaneCreditCardForm\n                    renderPayPalCardComponent={renderPayPalCardComponent}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default BigCommercePaymentsFastlaneForm;\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useEffect, useRef } from 'react';\n\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport BigCommercePaymentsFastlaneForm from './components/BigCommercePaymentsFastlaneForm';\n\nimport './BigCommercePaymentsFastlanePaymentMethod.scss';\nimport { isErrorWithTranslationKey } from '@bigcommerce/checkout/utility';\n\nexport interface BigCommercePaymentsFastlaneCardComponentRef {\n    renderPayPalCardComponent?: (container: string) => void;\n    showPayPalCardSelector?: () => Promise<CardInstrument | undefined>;\n}\n\nconst BigCommercePaymentsFastlanePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n    onUnhandledError,\n    paymentForm,\n    language,\n}) => {\n    const paypalCardComponentRef = useRef<BigCommercePaymentsFastlaneCardComponentRef>({});\n\n    const { isLoadingPaymentMethod, isInitializingPayment } = checkoutState.statuses;\n\n    const initializePaymentOrThrow = async () => {\n        try {\n            await checkoutService.initializePayment({\n                methodId: method.id,\n\n                bigcommerce_payments_fastlane: {\n                    onInit: (renderPayPalCardComponent) => {\n                        paypalCardComponentRef.current.renderPayPalCardComponent =\n                            renderPayPalCardComponent;\n                    },\n                    onChange: (showPayPalCardSelector) => {\n                        paypalCardComponentRef.current.showPayPalCardSelector =\n                            showPayPalCardSelector;\n                    },\n                    onError: (error: unknown) => {\n                        let finalError: Error;\n\n                        if (isErrorWithTranslationKey(error)) {\n                            finalError = new Error(language.translate(error.translationKey));\n                        } else if (error instanceof Error) {\n                            finalError = error;\n                        } else {\n                            finalError = new Error(\n                                language.translate('payment.errors.general_error'),\n                            );\n                        }\n\n                        return onUnhandledError(finalError);\n                    },\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePaymentOrThrow = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePaymentOrThrow();\n\n        return () => {\n            void deinitializePaymentOrThrow();\n        };\n    }, []);\n\n    const isLoading = isInitializingPayment() || isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <BigCommercePaymentsFastlaneForm\n                                renderPayPalCardComponent={\n                                    paypalCardComponentRef.current.renderPayPalCardComponent\n                                }\n                                showPayPalCardSelector={\n                                    paypalCardComponentRef.current.showPayPalCardSelector\n                                }\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BigCommercePaymentsFastlanePaymentMethod,\n    [{ id: 'bigcommerce_payments_fastlane' }],\n);\n","import BigCommercePaymentsFastlanePaymentMethod from './BigCommercePaymentsFastlanePaymentMethod';\n\nexport default BigCommercePaymentsFastlanePaymentMethod;\n","export interface ErrorWithTranslationKey {\n    translationKey: string;\n}\n\nexport default function isErrorWithTranslationKey(\n    error: unknown,\n): error is ErrorWithTranslationKey {\n    return typeof error === 'object' && error !== null && 'translationKey' in error;\n}\n","import React, { FunctionComponent } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport BigCommercePaymentsPaymentMethodComponent from '../components/BigCommercePaymentsPaymentMethodComponent';\n\nconst BigCommercePaymentsVenmoPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const isPaymentDataRequired = props.checkoutState.data.isPaymentDataRequired();\n\n    if (!isPaymentDataRequired) {\n        return null;\n    }\n\n    return (\n        <BigCommercePaymentsPaymentMethodComponent\n            providerOptionsKey=\"bigcommerce_payments_venmo\"\n            {...props}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BigCommercePaymentsVenmoPaymentMethod,\n    [{ id: 'bigcommerce_payments_venmo' }],\n);\n","import { FormField, LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, string, StringSchema } from 'yup';\n\nexport default memoize(function getBigCommercePaymentsRatePayValidationSchema({\n    formFieldData,\n    language,\n}: {\n    formFieldData: FormField[];\n    language: LanguageService;\n}) {\n    const requiredFieldErrorTranslationIds: { [fieldName: string]: string } = {\n        ratepayPhoneCountryCode: 'payment.ratepay.phone_country_code',\n        ratepayPhoneNumber: 'payment.ratepay.phone_number',\n        ratepayBirthDate: 'payment.ratepay.birth_date',\n    };\n\n    return object(\n        formFieldData.reduce(\n            (schema, { id, required }) => {\n                if (required) {\n                    if (requiredFieldErrorTranslationIds[id]) {\n                        schema[id] = string()\n                            .nullable()\n                            .required(\n                                language.translate(`payment.ratepay.errors.isRequired`, {\n                                    fieldName: language.translate(\n                                        requiredFieldErrorTranslationIds[id],\n                                    ),\n                                }),\n                            );\n\n                        if (id === 'ratepayPhoneCountryCode') {\n                            schema[id] = schema[id].matches(\n                                /^\\+\\d{2,}$/,\n                                language.translate('payment.ratepay.errors.isInvalid', {\n                                    fieldName: language.translate(\n                                        'payment.ratepay.phone_country_code',\n                                    ),\n                                }),\n                            );\n                        }\n\n                        if (id === 'ratepayPhoneNumber') {\n                            schema[id] = schema[id].matches(\n                                /^\\d{7,11}$/,\n                                language.translate('payment.ratepay.errors.isInvalid', {\n                                    fieldName: language.translate('payment.ratepay.phone_number'),\n                                }),\n                            );\n                        }\n                    }\n                }\n\n                return schema;\n            },\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions, @typescript-eslint/prefer-reduce-type-parameter\n            {} as { [key: string]: StringSchema<string | null> },\n        ),\n    );\n});\n","import { FormField } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react';\n\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n    CustomError,\n    SpecificError,\n    CountryData,\n    getCountryData,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { DynamicFormField, DynamicFormFieldType, FormContext } from '@bigcommerce/checkout/ui';\n\nimport getBigCommercePaymentsRatePayValidationSchema from '../validation-schemas/getBigCommercePaymentsRatePayValidationSchema';\n\nconst PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED = 'PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED';\nconst PAYMENT_SOURCE_DECLINED_BY_PROCESSOR = 'PAYMENT_SOURCE_DECLINED_BY_PROCESSOR';\nconst ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE =\n    'ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE';\n\ninterface RatePayFieldValues {\n    ratepayBirthDate: {\n        getDate(): number;\n        getMonth(): number;\n        getFullYear(): number;\n    };\n    ratepayPhoneCountryCode: string;\n    ratepayPhoneNumber: string;\n}\n\nconst formFieldData: FormField[] = [\n    {\n        name: 'ratepayBirthDate',\n        custom: false,\n        id: 'ratepayBirthDate',\n        label: 'payment.ratepay.birth_date',\n        required: true,\n        fieldType: DynamicFormFieldType.DATE,\n        inputDateFormat: 'dd.MM.yyyy',\n    },\n    {\n        name: 'ratepayPhoneCountryCode',\n        custom: false,\n        id: 'ratepayPhoneCountryCode',\n        label: 'payment.ratepay.phone_country_code',\n        required: true,\n        fieldType: DynamicFormFieldType.TEXT,\n        type: 'string',\n    },\n    {\n        name: 'ratepayPhoneNumber',\n        custom: false,\n        id: 'ratepayPhoneNumber',\n        label: 'payment.ratepay.phone_number',\n        required: true,\n        fieldType: DynamicFormFieldType.TEXT,\n    },\n];\n\nconst BigCommercePaymentsRatePayPaymentMethod: FunctionComponent<any> = ({\n    method,\n    checkoutService,\n    onUnhandledError,\n    paymentForm: { isSubmitted, setFieldValue, setValidationSchema, setSubmitted },\n    language,\n    checkoutState,\n}) => {\n    const fieldsValues = useRef<Partial<RatePayFieldValues>>({});\n    const isPaymentDataRequired = checkoutState.data.isPaymentDataRequired();\n    const getCountryInfo = (): CountryData => {\n        const billing = checkoutState.data.getBillingAddress();\n\n        return getCountryData(billing.country)[0] || '';\n    };\n\n    if (!isPaymentDataRequired) {\n        return null;\n    }\n\n    const initializePayment = async () => {\n        try {\n            await checkoutService.initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n                bigcommerce_payments_ratepay: {\n                    container: '#checkout-payment-continue',\n                    legalTextContainer: 'legal-text-container',\n                    loadingContainerId: 'checkout-page-container',\n                    getFieldsValues: () => fieldsValues.current,\n                    onError: (error: SpecificError) => {\n                        const ratepaySpecificError = error.errors?.filter((e) => e.provider_error);\n\n                        if (ratepaySpecificError?.length) {\n                            let translationCode;\n                            let ratepayError;\n                            const ratepaySpecificErrorCode =\n                                ratepaySpecificError[0].provider_error?.code;\n\n                            switch (ratepaySpecificErrorCode) {\n                                case PAYMENT_SOURCE_DECLINED_BY_PROCESSOR:\n                                    translationCode =\n                                        'payment.ratepay.errors.paymentSourceDeclinedByProcessor';\n                                    break;\n\n                                case PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED:\n                                    translationCode =\n                                        'payment.ratepay.errors.paymentSourceInfoCannotBeVerified';\n                                    break;\n\n                                case ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE:\n                                    translationCode =\n                                        'payment.ratepay.errors.itemCategoryNotSupportedByPaymentSource';\n                                    break;\n\n                                default:\n                                    translationCode = 'common.error_heading';\n                            }\n\n                            if (\n                                ratepaySpecificErrorCode !==\n                                ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE\n                            ) {\n                                ratepayError = new CustomError({\n                                    data: {\n                                        shouldBeTranslatedAsHtml: true,\n                                        translationKey: translationCode,\n                                    },\n                                });\n                            } else {\n                                ratepayError = new Error(language.translate(translationCode));\n                            }\n\n                            return onUnhandledError(ratepayError);\n                        }\n\n                        onUnhandledError(error);\n                    },\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePayment = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n        void initializePayment();\n\n        return () => {\n            void deinitializePayment();\n        };\n    }, []);\n\n    const updateFieldValues = (field: { [key: string]: string }) => {\n        fieldsValues.current = { ...fieldsValues.current, ...field };\n    };\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const handleChange = useCallback(\n        (fieldId: string) => (value: string) => {\n            setFieldValue(fieldId, value);\n            updateFieldValues({ [fieldId]: value });\n        },\n        [setFieldValue],\n    );\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const validationSchema = useMemo(\n        () =>\n            getBigCommercePaymentsRatePayValidationSchema({\n                formFieldData,\n                language,\n            }),\n        [language, formFieldData],\n    );\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n        setSubmitted(false);\n        setValidationSchema(method, validationSchema);\n    }, [validationSchema, method, setValidationSchema, setSubmitted]);\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n        setFieldValue('ratepayPhoneCountryCode', getCountryInfo().dialCode);\n    }, []);\n\n    return (\n        <div style={{ marginBottom: '20px' }}>\n            <FormContext.Provider value={{ isSubmitted, setSubmitted }}>\n                {formFieldData.map((field) => {\n                    return (\n                        <DynamicFormField\n                            extraClass={`dynamic-form-field--${field.id}`}\n                            field={field}\n                            key={field.id}\n                            label={language.translate(field.label)}\n                            onChange={handleChange(field.id)}\n                        />\n                    );\n                })}\n            </FormContext.Provider>\n        </div>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BigCommercePaymentsRatePayPaymentMethod,\n    [{ gateway: 'bigcommerce_payments_apms', id: 'ratepay' }],\n);\n","import { CardInstrument, LegacyHostedFormOptions } from '@bigcommerce/checkout-sdk';\nimport { compact, forIn } from 'lodash';\nimport React, { FunctionComponent, ReactNode, useCallback, useState } from 'react';\n\nimport {\n    CreditCardPaymentMethodComponent,\n    CreditCardPaymentMethodProps,\n} from '@bigcommerce/checkout/credit-card-integration';\nimport {\n    getHostedCreditCardValidationSchema,\n    getHostedInstrumentValidationSchema,\n    HostedCreditCardFieldset,\n    HostedCreditCardValidation,\n} from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport {\n    CreditCardCustomerCodeField,\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    PaymentMethodProps,\n    PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst BigCommercePaymentsCreditCardPaymentMethod: FunctionComponent<PaymentMethodProps> = (\n    props,\n) => {\n    const { checkoutService, checkoutState, paymentForm, language, method } = props;\n\n    const { cardCode, showCardHolderName, isHostedFormEnabled, requireCustomerCode } =\n        method.config;\n\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n\n    const { setFieldTouched, setFieldValue, setSubmitted, submitForm } = paymentForm;\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    // TODO: update checkout-sdk cardCode inteface with null value or check if it is possible to get cardCode as null at all\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    const isCardCodeRequired = cardCode || cardCode === null;\n    const isCardHolderNameRequired = showCardHolderName ?? true;\n\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const getHostedFormOptions: (\n        selectedInstrument?: CardInstrument,\n    ) => Promise<LegacyHostedFormOptions> = useCallback(\n        async (selectedInstrument) => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n\n            // Info: to generate valid nonce for vaulted instrument with untrusted shipping address, all hosted fields must be rendered\n            const shouldRenderHostedFields =\n                isInstrumentCardNumberRequired || isInstrumentCardCodeRequired;\n\n            let styleContainerId;\n\n            if (selectedInstrument && shouldRenderHostedFields) {\n                styleContainerId = getHostedFieldId('ccCvv');\n            }\n\n            if (!selectedInstrument) {\n                styleContainerId = getHostedFieldId('ccNumber');\n            }\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification: shouldRenderHostedFields\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                    instrumentId: selectedInstrument.bigpayToken,\n                                }\n                              : undefined,\n                          cardNumberVerification: shouldRenderHostedFields\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_number_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccNumber'),\n                                    instrumentId: selectedInstrument.bigpayToken,\n                                }\n                              : undefined,\n                          cardExpiryVerification: shouldRenderHostedFields\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_expiry_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccExpiry'),\n                                    instrumentId: selectedInstrument.bigpayToken,\n                                }\n                              : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_name_label',\n                              ),\n                              containerId: getHostedFieldId('ccName'),\n                          },\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors, fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(\n                            errorKey,\n                            fieldErrors && fieldErrors[0].type ? fieldErrors[0].type : '',\n                        );\n\n                        if (fieldErrors && fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isCardHolderNameRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldValue,\n            setFieldTouched,\n            setFocusedFieldType,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n\n    const getHostedStoredCardValidationFieldset: (\n        selectedInstrument?: CardInstrument,\n    ) => ReactNode = useCallback(\n        (selectedInstrument) => {\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n\n            // Info: to generate valid nonce for vaulted instrument with untrusted shipping address, all hosted fields must be rendered\n            const shouldRenderHostedFields =\n                isInstrumentCardNumberRequired || isInstrumentCardCodeRequired;\n\n            return (\n                <HostedCreditCardValidation\n                    cardCodeId={\n                        isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                    }\n                    cardExpiryId={\n                        shouldRenderHostedFields ? getHostedFieldId('ccExpiry') : undefined\n                    }\n                    cardNumberId={\n                        isInstrumentCardNumberRequired ? getHostedFieldId('ccNumber') : undefined\n                    }\n                    focusedFieldType={focusedFieldType}\n                />\n            );\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            method,\n        ],\n    );\n\n    const initializePayment = checkoutService.initializePayment;\n\n    const initializeBigCommercePaymentsCreditCardPayment: CreditCardPaymentMethodProps['initializePayment'] =\n        useCallback(\n            async (options, selectedInstrument) => {\n                return initializePayment({\n                    ...options,\n                    bigcommerce_payments_creditcards: {\n                        form: isHostedFormEnabled\n                            ? await getHostedFormOptions(selectedInstrument)\n                            : undefined,\n                    },\n                });\n            },\n            [getHostedFormOptions, initializePayment],\n        );\n\n    // Info: isHostedFormEnabled is an option in store config which responsible for switching BigCommercePayments Credit Card form\n    // rendering between Hosted Form and default BC fields (non-hosted)\n    return isHostedFormEnabled ? (\n        <CreditCardPaymentMethodComponent\n            {...props}\n            cardFieldset={\n                <HostedCreditCardFieldset\n                    additionalFields={\n                        requireCustomerCode && <CreditCardCustomerCodeField name=\"ccCustomerCode\" />\n                    }\n                    cardCodeId={isCardCodeRequired ? getHostedFieldId('ccCvv') : undefined}\n                    cardExpiryId={getHostedFieldId('ccExpiry')}\n                    cardNameId={getHostedFieldId('ccName')}\n                    cardNumberId={getHostedFieldId('ccNumber')}\n                    focusedFieldType={focusedFieldType}\n                />\n            }\n            cardValidationSchema={getHostedCreditCardValidationSchema({ language })}\n            deinitializePayment={checkoutService.deinitializePayment}\n            getHostedFormOptions={getHostedFormOptions}\n            getStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n            initializePayment={initializeBigCommercePaymentsCreditCardPayment}\n            storedCardValidationSchema={getHostedInstrumentValidationSchema({\n                language,\n                isCardExpiryRequired: true,\n            })}\n        />\n    ) : (\n        <CreditCardPaymentMethodComponent\n            {...props}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializeBigCommercePaymentsCreditCardPayment}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BigCommercePaymentsCreditCardPaymentMethod,\n    [{ id: 'bigcommerce_payments_creditcards' }],\n);\n"],"names":["method","currentInstrument","setCurrentInstrument","useState","checkoutState","customer","data","getCustomer","instruments","getInstruments","paymentForm","setFieldValue","accountInstruments","useMemo","filter","isAccountInstrument","trustedAccountInstruments","instrument","trustedShippingAddress","hasAccountInstruments","length","isInstrumentFeatureAvailable","isGuest","Boolean","config","isVaultingEnabled","initializationData","isComplete","shouldShowInstrumentFieldset","shouldCreateNewInstrument","shouldConfirmInstrument","useEffect","defaultInstrument","getDefaultInstrument","undefined","handleSelectInstrument","useCallback","id","find","bigpayToken","handleUseNewInstrument","toResolvableComponent","props","isPaymentDataRequired","statuses","isLoadingInstruments","isLoadingPaymentMethod","checkoutService","onUnhandledError","loadInstruments","error","Error","isLoading","allInstruments","LoadingOverlay","hideContentWhenLoading","BigCommercePaymentsPaymentMethodComponent","providerOptionsKey","AccountInstrumentFieldset","A","onSelectInstrument","onUseNewInstrument","selectedInstrument","TranslatedHtml","StoreInstrumentFieldset","instrumentId","widgetContainerId","gateway","extraOptions","apmFieldsContainer","apmFieldsStyles","variables","fontFamily","colorBackground","textColor","fontSizeBase","spacingUnit","borderColor","borderRadius","borderWidth","rules","backgroundColor","color","fontSize","providerOptionsData","className","children","language","buttonActionsRef","useRef","fieldsValuesRef","renderButtonRef","hasPayPalButton","termsValue","getFieldValue","shouldSaveInstrument","validateForm","validationErrors","Object","keys","validateButton","current","disable","enable","togglePaypalButton","hidePaymentSubmitButton","setTimeout","initializePayment","gatewayId","methodId","container","shouldRenderPayPalButtonOnInitialization","onRenderButton","onInit","submitForm","setSubmitted","onError","disableSubmit","message","translate","onValidate","resolve","reject","keysValidation","forEach","key","setFieldTouched","onInitButton","actions","getFieldsValues","deinitializePayment","renderPayPalCardComponent","onChange","cardType","type","toLowerCase","mapFromInstrumentCardType","brand","CreditCardIcon","last4","PoweredByPayPalFastlaneLabel","Button","onClick","result","size","Tiny","testId","variant","Secondary","TranslatedString","showPayPalCardSelector","setSelectedInstrument","getPaymentProviderCustomer","paymentProviderCustomer","paypalFastlaneCustomer","useBigCommercePaymentsFastlaneInstruments","shouldShowInstrumentsForm","paypalCardComponentRef","isInitializingPayment","bigcommerce_payments_fastlane","finalError","isErrorWithTranslationKey","translationKey","formContextProps","isSubmitted","FormContext","Provider","value","CheckoutContext","LocaleProvider","PaymentFormContext","memoize","formFieldData","requiredFieldErrorTranslationIds","ratepayPhoneCountryCode","ratepayPhoneNumber","ratepayBirthDate","reduce","schema","required","nullable","fieldName","matches","ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE","name","custom","label","fieldType","DynamicFormFieldType","DATE","inputDateFormat","TEXT","setValidationSchema","fieldsValues","bigcommerce_payments_ratepay","legalTextContainer","loadingContainerId","ratepaySpecificError","errors","e","provider_error","translationCode","ratepayError","ratepaySpecificErrorCode","code","CustomError","shouldBeTranslatedAsHtml","handleChange","fieldId","field","validationSchema","getBigCommercePaymentsRatePayValidationSchema","billing","getBillingAddress","country","getCountryInfo","dialCode","style","marginBottom","map","DynamicFormField","extraClass","cardCode","showCardHolderName","isHostedFormEnabled","requireCustomerCode","focusedFieldType","setFocusedFieldType","isInstrumentCardCodeRequiredProp","isInstrumentCardNumberRequiredProp","isCardCodeRequired","isCardHolderNameRequired","getHostedFieldId","compact","join","getHostedFormOptions","styleProps","isInstrumentCardNumberRequired","isInstrumentCardCodeRequired","shouldRenderHostedFields","styleContainerId","fields","cardCodeVerification","accessibilityLabel","containerId","cardNumberVerification","cardExpiryVerification","cardExpiry","placeholder","cardName","cardNumber","styles","default","focus","Focus","onBlur","onCardTypeChange","onEnter","onFocus","forIn","fieldErrors","errorKey","getHostedStoredCardValidationFieldset","cardCodeId","cardExpiryId","cardNumberId","initializeBigCommercePaymentsCreditCardPayment","options","bigcommerce_payments_creditcards","form","cardFieldset","additionalFields","cardNameId","cardValidationSchema","getStoredCardValidationFieldset","storedCardValidationSchema","isCardExpiryRequired"],"sourceRoot":""}