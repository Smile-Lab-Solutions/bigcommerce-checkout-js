{"version":3,"file":"7645-cbbe538d.js","mappings":"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","sources":["webpack://checkout/./packages/ui/src/form/Label/Label.tsx","webpack://checkout/./packages/core/src/app/formFields/mapCustomFormFieldsFromFormValues.ts","webpack://checkout/./packages/ui/src/form/TextInput/TextInput.tsx","webpack://checkout/./packages/ui/src/form/Input/Input.tsx","webpack://checkout/./packages/locale/src/withDate.tsx","webpack://checkout/./packages/ui/src/icon/IconChevronDown.tsx","webpack://checkout/./packages/ui/src/form/TextArea/TextArea.tsx","webpack://checkout/./packages/ui/src/form/DynamicFormField/DynamicInput.tsx","webpack://checkout/./packages/ui/src/form/RadioInput/RadioInput.tsx","webpack://checkout/./packages/ui/src/form/FormFieldError/FormFieldError.tsx","webpack://checkout/./packages/ui/src/form/FormField/FormField.tsx","webpack://checkout/./packages/core/src/app/ui/form/CheckboxInput.tsx","webpack://checkout/./packages/core/src/app/ui/form/CheckboxFormField.tsx","webpack://checkout/./packages/ui/src/form/DynamicFormField/MultiCheckboxControl.tsx","webpack://checkout/./packages/ui/src/form/DynamicFormField/CheckboxGroupFormField.tsx","webpack://checkout/./packages/ui/src/form/DynamicFormField/DynamicFormField.tsx","webpack://checkout/./packages/ui/src/form/CheckboxInput/CheckboxInput.tsx","webpack://checkout/./packages/core/src/app/common/utility/isFloatingLabelEnabled.ts","webpack://checkout/./packages/ui/src/form/FormFieldContainer/FormFieldContainer.tsx","webpack://checkout/./packages/ui/src/form/BasicFormField/BasicFormField.tsx"],"sourcesContent":["import classNames from 'classnames';\nimport React, { type FunctionComponent, type LabelHTMLAttributes } from 'react';\n\nexport interface LabelProps extends LabelHTMLAttributes<HTMLLabelElement> {\n    testId?: string;\n    hidden?: boolean;\n    isFloatingLabelEnabled?: boolean;\n    additionalClassName?: string;\n}\n\nconst Label: FunctionComponent<LabelProps> = ({\n    children,\n    className,\n    hidden,\n    testId,\n    isFloatingLabelEnabled,\n    additionalClassName,\n    ...rest\n}) => (\n    <label\n        {...rest}\n        className={classNames(\n            { 'floating-label': isFloatingLabelEnabled },\n            className || 'form-label',\n            { 'is-srOnly': hidden },\n            'optimizedCheckout-form-label',\n            additionalClassName,\n        )}\n        data-test={testId}\n    >\n        {children}\n    </label>\n);\n\nexport default Label;\n","import { forIn, isDate, padStart } from 'lodash';\n\nexport default function mapCustomFormFieldsFromFormValues(customFieldsObject: {\n    [id: string]: any;\n}): Array<{ fieldId: string; fieldValue: string }> {\n    const customFields: Array<{ fieldId: string; fieldValue: string }> = [];\n\n    forIn(customFieldsObject, (value, key) => {\n        let fieldValue: string;\n\n        if (isDate(value)) {\n            const padMonth = padStart((value.getMonth() + 1).toString(), 2, '0');\n            const padDay = padStart(value.getDate().toString(), 2, '0');\n\n            fieldValue = `${value.getFullYear()}-${padMonth}-${padDay}`;\n        } else {\n            fieldValue = value;\n        }\n\n        customFields.push({\n            fieldId: key,\n            fieldValue,\n        });\n    });\n\n    return customFields;\n}\n","import classNames from 'classnames';\nimport React, { forwardRef, type Ref } from 'react';\n\nimport { Input, type InputProps } from '../Input';\n\nexport interface TextInputProps extends InputProps {\n    additionalClassName?: string;\n    appearFocused?: boolean;\n    type?: 'text' | 'password' | 'tel' | 'email' | 'number';\n    isFloatingLabelEnabled?: boolean;\n    themeV2?: boolean;\n}\n\nconst TextInput = forwardRef(\n    (\n        {\n            additionalClassName,\n            isFloatingLabelEnabled,\n            appearFocused,\n            type = 'text',\n            themeV2 = false,\n            ...rest\n        }: TextInputProps,\n        ref: Ref<HTMLInputElement>,\n    ) => (\n        <Input\n            {...rest}\n            className={classNames(\n                'form-input',\n                'optimizedCheckout-form-input',\n                { 'form-input--focus': appearFocused },\n                { 'optimizedCheckout-form-input--focus': appearFocused },\n                additionalClassName,\n                { 'floating-form-field-input': themeV2 && isFloatingLabelEnabled },\n                { 'body-regular': themeV2 && !isFloatingLabelEnabled },\n            )}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\n            ref={ref}\n            type={type}\n        />\n    ),\n);\n\nexport default TextInput;\n","import classNames from 'classnames';\nimport { includes } from 'lodash';\nimport React, { forwardRef, type InputHTMLAttributes, type Ref } from 'react';\n\nexport interface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n    testId?: string;\n    isFloatingLabelEnabled?: boolean;\n}\n\nconst Input = forwardRef(\n    (\n        { className, testId, placeholder, name, isFloatingLabelEnabled, ...rest }: InputProps,\n        ref: Ref<HTMLInputElement>,\n    ) => {\n        const floatingLabelDisabledFieldNames = ['orderComment', 'redeemableCode'];\n\n        return (\n            <input\n                {...{\n                    ...rest,\n                    className: classNames(className, {\n                        'floating-input':\n                            isFloatingLabelEnabled &&\n                            !includes(floatingLabelDisabledFieldNames, name),\n                    }),\n                    name,\n                }}\n                data-test={testId}\n                placeholder={isFloatingLabelEnabled ? ' ' : placeholder}\n                ref={ref}\n            />\n        );\n    },\n);\n\nexport default Input;\n","import { createInjectHoc, type InjectHoc } from '@bigcommerce/checkout/legacy-hoc';\n\nimport LocaleContext from './LocaleContext';\n\nexport interface WithDateProps {\n    date: {\n        inputFormat: string;\n    };\n}\n\nconst withDate: InjectHoc<WithDateProps> = createInjectHoc(LocaleContext, {\n    displayNamePrefix: 'withDate',\n    pickProps: (value, key) => key === 'date' && !!value,\n});\n\nexport default withDate;\n","import React, { type FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconChevronDown: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconChevronDown);\n","import classNames from 'classnames';\nimport React, { forwardRef, type Ref, type TextareaHTMLAttributes } from 'react';\n\nexport interface TextAreaProps extends TextareaHTMLAttributes<HTMLTextAreaElement> {\n    additionalClassName?: string;\n    testId?: string;\n    isFloatingLabelEnabled?: boolean;\n}\n\nconst TextArea = forwardRef(\n    (\n        { additionalClassName, testId, className, isFloatingLabelEnabled, ...rest }: TextAreaProps,\n        ref: Ref<HTMLTextAreaElement>,\n    ) => {\n        return (\n            <textarea\n                {...rest}\n                className={\n                    className ||\n                    classNames(\n                        { 'floating-textarea': isFloatingLabelEnabled },\n                        'form-input',\n                        'optimizedCheckout-form-input',\n                        additionalClassName,\n                    )\n                }\n                data-test={testId}\n                ref={ref}\n            />\n        );\n    },\n);\n\nexport default TextArea;\n","import { type FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { isDate, noop } from 'lodash';\nimport React, { type FunctionComponent, lazy, memo, Suspense, useCallback } from 'react';\n\nimport { withDate, type WithDateProps } from '@bigcommerce/checkout/locale';\n\nimport { IconChevronDown } from '../../icon';\nimport { CheckboxInput } from '../CheckboxInput';\nimport { type InputProps } from '../Input';\nimport { RadioInput } from '../RadioInput';\nimport { TextArea } from '../TextArea';\nimport { TextInput } from '../TextInput';\n\nimport DynamicFormFieldType from './DynamicFormFieldType';\n\nconst ReactDatePicker = lazy(\n    () =>\n        import(\n            /* webpackChunkName: \"react-datepicker\" */\n            'react-datepicker'\n        ),\n);\n\nexport interface DynamicInputProps extends InputProps {\n    id: string;\n    additionalClassName?: string;\n    value?: string | string[];\n    rows?: number;\n    fieldType?: DynamicFormFieldType;\n    options?: FormFieldItem[];\n    isFloatingLabelEnabled?: boolean;\n    themeV2?: boolean;\n    inputDateFormat?: string;\n}\n\nconst DynamicInput: FunctionComponent<DynamicInputProps & WithDateProps> = ({\n    fieldType,\n    id,\n    name,\n    onChange = noop,\n    options,\n    placeholder,\n    value,\n    isFloatingLabelEnabled,\n    themeV2 = false,\n    date,\n    inputDateFormat,\n    ...rest\n}) => {\n    const inputFormat = inputDateFormat || date.inputFormat || '';\n\n    const handleDateChange = useCallback(\n        (dateValue: string, event: any) =>\n            onChange({\n                ...event,\n                target: {\n                    name,\n                    value: dateValue,\n                },\n            }),\n        [onChange, name],\n    );\n\n    switch (fieldType) {\n        case DynamicFormFieldType.DROPDOWM:\n            return (\n                <>\n                    <div\n                        className={classNames(\n                            { 'dropdown-chevron': !isFloatingLabelEnabled },\n                            { 'floating-select-chevron': isFloatingLabelEnabled },\n                        )}\n                    >\n                        <IconChevronDown />\n                    </div>\n                    <select\n                        {...(rest as any)}\n                        className={classNames(\n                            { 'floating-select': isFloatingLabelEnabled },\n                            'form-select optimizedCheckout-form-select',\n                            { 'floating-form-field-input': themeV2 },\n                        )}\n                        data-test={`${id}-select`}\n                        id={id}\n                        name={name}\n                        onChange={onChange}\n                        value={value ?? ''}\n                    >\n                        {!!placeholder && <option value=\"\">{placeholder}</option>}\n                        {options &&\n                            options.map(({ label, value: optionValue }) => (\n                                <option key={optionValue} value={optionValue}>\n                                    {label}\n                                </option>\n                            ))}\n                    </select>\n                </>\n            );\n\n        case DynamicFormFieldType.RADIO:\n            if (!options || !options.length) {\n                return null;\n            }\n\n            return (\n                <>\n                    {options.map(({ label, value: optionValue }) => (\n                        <RadioInput\n                            {...rest}\n                            checked={optionValue === value}\n                            id={`${id}-${optionValue}`}\n                            key={optionValue}\n                            label={label}\n                            name={name}\n                            onChange={onChange}\n                            testId={`${id}-${optionValue}-radio`}\n                            themeV2={themeV2}\n                            value={optionValue}\n                        />\n                    ))}\n                </>\n            );\n\n        case DynamicFormFieldType.CHECKBOX:\n            if (!options || !options.length) {\n                return null;\n            }\n\n            return (\n                <>\n                    {options.map(({ label, value: optionValue }) => (\n                        <CheckboxInput\n                            {...rest}\n                            checked={Array.isArray(value) ? value.includes(optionValue) : false}\n                            id={`${id}-${optionValue}`}\n                            key={optionValue}\n                            label={label}\n                            name={name}\n                            onChange={onChange}\n                            testId={`${id}-${optionValue}-checkbox`}\n                            themeV2={themeV2}\n                            value={optionValue}\n                        />\n                    ))}\n                </>\n            );\n\n        case DynamicFormFieldType.DATE:\n            return (\n                <Suspense>\n                    <ReactDatePicker\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        {...(rest as any)}\n                        autoComplete=\"off\"\n                        // FIXME: we can avoid this by simply using onChangeRaw, but it's not being triggered properly\n                        // https://github.com/Hacker0x01/react-datepicker/issues/1357\n                        // onChangeRaw={ rest.onChange }\n                        calendarClassName=\"optimizedCheckout-contentPrimary\"\n                        className={classNames('form-input optimizedCheckout-form-input', {\n                            'floating-input': isFloatingLabelEnabled,\n                            'floating-form-field-input': themeV2,\n                        })}\n                        dateFormat={inputFormat}\n                        maxDate={rest.max ? new Date(`${rest.max}T00:00:00Z`) : undefined}\n                        minDate={rest.min ? new Date(`${rest.min}T00:00:00Z`) : undefined}\n                        name={name}\n                        onChange={handleDateChange}\n                        placeholderText={inputFormat.toUpperCase()}\n                        popperClassName=\"optimizedCheckout-contentPrimary\"\n                        selected={isDate(value) ? value : undefined}\n                    />\n                </Suspense>\n            );\n\n        case DynamicFormFieldType.MULTILINE:\n            return (\n                <TextArea\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    {...(rest as any)}\n                    id={id}\n                    isFloatingLabelEnabled={isFloatingLabelEnabled}\n                    name={name}\n                    onChange={onChange}\n                    testId={`${id}-text`}\n                    themeV2={themeV2}\n                    type={fieldType}\n                    value={value}\n                />\n            );\n\n        default:\n            return (\n                <TextInput\n                    {...rest}\n                    id={id}\n                    isFloatingLabelEnabled={isFloatingLabelEnabled}\n                    name={name}\n                    onChange={onChange}\n                    placeholder={placeholder}\n                    testId={`${id}-${\n                        fieldType === DynamicFormFieldType.PASSWORD ? 'password' : 'text'\n                    }`}\n                    themeV2={themeV2}\n                    type={fieldType}\n                    value={value}\n                />\n            );\n    }\n};\n\nexport default memo(withDate(DynamicInput));\n","import classNames from 'classnames';\nimport React, { forwardRef, type ReactNode, type Ref } from 'react';\n\nimport Input, { type InputProps } from '../Input/Input';\nimport Label from '../Label/Label';\n\nexport interface RadioInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n    themeV2?: boolean;\n}\n\nconst RadioInput = forwardRef(\n    (\n        {\n            additionalClassName,\n            label,\n            value,\n            checked,\n            id,\n            themeV2 = false,\n            ...rest\n        }: RadioInputProps,\n        ref: Ref<HTMLInputElement>,\n    ) => (\n        <>\n            <Input\n                {...rest}\n                checked={checked}\n                className={classNames(\n                    'form-radio',\n                    'optimizedCheckout-form-radio',\n                    additionalClassName,\n                )}\n                id={id}\n                ref={ref}\n                type=\"radio\"\n                value={value}\n            />\n            <Label additionalClassName={themeV2 ? 'body-regular' : ''} htmlFor={id}>\n                {label}\n            </Label>\n        </>\n    ),\n);\n\nexport default RadioInput;\n","import { ErrorMessage } from 'formik';\nimport React, { type FunctionComponent, memo, useCallback } from 'react';\n\nimport { FormContext } from '../contexts';\n\nexport interface FormFieldErrorProps {\n    name: string;\n    testId?: string;\n    errorId: string;\n}\n\nconst FormFieldError: FunctionComponent<FormFieldErrorProps> = ({ name, testId, errorId }) => {\n    const renderMessage = useCallback(\n        (message: string) => (\n            <ul className=\"form-field-errors\" data-test={testId}>\n                <li className=\"form-field-error\">\n                    <label\n                        aria-live=\"polite\"\n                        className=\"form-inlineMessage\"\n                        htmlFor={name}\n                        id={errorId}\n                        role=\"alert\"\n                    >\n                        {message}\n                    </label>\n                </li>\n            </ul>\n        ),\n        [errorId, name, testId],\n    );\n\n    return (\n        <FormContext.Consumer>\n            {({ isSubmitted }) =>\n                isSubmitted && <ErrorMessage name={name} render={renderMessage} />\n            }\n        </FormContext.Consumer>\n    );\n};\n\nexport default memo(FormFieldError);\n","import { type FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { type FunctionComponent, memo, type ReactNode, useCallback } from 'react';\n\nimport { BasicFormField } from '../BasicFormField';\nimport { FormFieldError } from '../FormFieldError';\nimport { Label } from '../Label';\n\nexport interface FormFieldProps {\n    additionalClassName?: string;\n    name: string;\n    label?: ReactNode | ((fieldName: string) => ReactNode);\n    labelContent?: ReactNode;\n    footer?: ReactNode;\n    id?: string;\n    isFloatingLabelEnabled?: boolean;\n    themeV2?: boolean;\n    input(field: FieldProps<string>): ReactNode;\n    onChange?(value: string): void;\n}\n\nconst FormField: FunctionComponent<FormFieldProps> = ({\n    additionalClassName,\n    labelContent,\n    label,\n    onChange,\n    footer,\n    input,\n    name,\n    id,\n    isFloatingLabelEnabled,\n    themeV2 = false,\n}) => {\n    const renderField = useCallback(\n        (props: FieldProps<string>) => (\n            <>\n                {isFloatingLabelEnabled && input(props)}\n\n                {label !== undefined && (typeof label === 'function' ? label(name) : label)}\n                {labelContent !== undefined && !label && (\n                    <Label\n                        additionalClassName={themeV2 ? 'floating-form-field-label' : ''}\n                        htmlFor={name}\n                        id={`${id ?? name}-label`}\n                        isFloatingLabelEnabled={isFloatingLabelEnabled}\n                    >\n                        {labelContent}\n                    </Label>\n                )}\n\n                {!isFloatingLabelEnabled && input(props)}\n\n                <FormFieldError\n                    errorId={`${id ?? name}-field-error-message`}\n                    name={name}\n                    testId={`${kebabCase(name)}-field-error-message`}\n                />\n\n                {footer}\n            </>\n        ),\n        [isFloatingLabelEnabled, input, label, name, labelContent, themeV2, id, footer],\n    );\n\n    return (\n        <BasicFormField\n            additionalClassName={additionalClassName}\n            name={name}\n            onChange={onChange}\n            render={renderField}\n        />\n    );\n};\n\nexport default memo(FormField);\n","import classNames from 'classnames';\nimport React, { forwardRef, type ReactNode, type Ref } from 'react';\n\nimport Input, { type InputProps } from './Input';\nimport Label from './Label';\n\nexport interface CheckboxInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n    themeV2?: boolean;\n}\n\nconst CheckboxInput = forwardRef(\n    (\n        { additionalClassName, label, id, testId, themeV2 = false, ...rest }: CheckboxInputProps,\n        ref: Ref<HTMLInputElement>,\n    ) => (\n        <>\n            <Input\n                {...rest}\n                className={classNames(\n                    'form-checkbox',\n                    'optimizedCheckout-form-checkbox',\n                    additionalClassName,\n                )}\n                id={id}\n                ref={ref}\n                testId={testId}\n                type=\"checkbox\"\n            />\n            <Label additionalClassName={themeV2 ? 'body-regular' : ''} htmlFor={id}>{label}</Label>\n        </>\n    ),\n);\n\nexport default CheckboxInput;\n","import { type FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { type FunctionComponent, memo, type ReactNode, useCallback } from 'react';\n\nimport BasicFormField from './BasicFormField';\nimport CheckboxInput from './CheckboxInput';\nimport FormFieldError from './FormFieldError';\n\nexport interface CheckboxFormFieldProps {\n    additionalClassName?: string;\n    disabled?: boolean;\n    name: string;\n    id?: string;\n    labelContent: ReactNode;\n    onChange?(isChecked: boolean): void;\n    testId?: string;\n    themeV2?: boolean;\n}\n\nconst CheckboxFormField: FunctionComponent<CheckboxFormFieldProps> = ({\n    additionalClassName,\n    disabled = false,\n    labelContent,\n    onChange,\n    name,\n    id,\n    testId,\n    themeV2 = false,\n}) => {\n    const renderField = useCallback(\n        ({ field }: FieldProps) => (\n            <>\n                <CheckboxInput\n                    {...field}\n                    checked={!!field.value}\n                    disabled={disabled}\n                    id={id || field.name}\n                    label={labelContent}\n                    testId={testId}\n                    themeV2={themeV2}\n                />\n\n                <FormFieldError\n                    errorId={`${id ?? name}-field-error-message`}\n                    name={name}\n                    testId={`${kebabCase(name)}-field-error-message`}\n                />\n            </>\n        ),\n        [disabled, id, labelContent, name],\n    );\n\n    return (\n        <BasicFormField\n            additionalClassName={additionalClassName}\n            name={name}\n            onChange={onChange}\n            render={renderField}\n        />\n    );\n};\n\nexport default memo(CheckboxFormField);\n","/* istanbul ignore file */\n\nimport classNames from 'classnames';\nimport React, { type FunctionComponent, memo, type MouseEvent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport './MultiCheckboxControl.scss';\n\nexport interface MultiCheckboxControlProps {\n    testId?: string;\n    themeV2?: boolean;\n    onSelectedAll(): void;\n    onSelectedNone(): void;\n}\n\nconst MultiCheckboxControl: FunctionComponent<MultiCheckboxControlProps> = ({\n    testId,\n    onSelectedAll,\n    onSelectedNone,\n    themeV2 = false,\n}) => {\n    const handleSelectAllClick = useCallback(\n        (event: MouseEvent) => {\n            event.preventDefault();\n            onSelectedAll();\n        },\n        [onSelectedAll],\n    );\n\n    const handleSelectNoneClick = useCallback(\n        (event: MouseEvent) => {\n            event.preventDefault();\n            onSelectedNone();\n        },\n        [onSelectedNone],\n    );\n\n    return (\n        <ul className={classNames('multiCheckbox--controls', { 'body-regular': themeV2 })}>\n            <li className=\"multiCheckbox--control\">\n                <TranslatedString id=\"address.select\" />\n            </li>\n\n            <li className=\"multiCheckbox--control\">\n                <a\n                    data-test={`${testId}Checkbox-all-button`}\n                    href=\"#\"\n                    onClick={handleSelectAllClick}\n                >\n                    <TranslatedString id=\"address.select_all\" />\n                </a>\n            </li>\n\n            <li className=\"multiCheckbox--control\">\n                <a\n                    data-test={`${testId}Checkbox-none-button`}\n                    href=\"#\"\n                    onClick={handleSelectNoneClick}\n                >\n                    <TranslatedString id=\"address.select_none\" />\n                </a>\n            </li>\n        </ul>\n    );\n};\n\nexport default memo(MultiCheckboxControl);\n","import { type FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport { FieldArray, type FieldArrayRenderProps, getIn } from 'formik';\nimport { difference, kebabCase, noop, pick } from 'lodash';\nimport React, {\n    type ChangeEvent,\n    type FunctionComponent,\n    memo,\n    type ReactNode,\n    useCallback,\n} from 'react';\n\nimport { FormFieldContainer } from '../FormFieldContainer';\nimport { FormFieldError } from '../FormFieldError';\n\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\nimport MultiCheckboxControl from './MultiCheckboxControl';\n\nexport interface CheckboxGroupFormFieldProps {\n    id: string;\n    label: ReactNode;\n    name: string;\n    options: FormFieldItem[];\n    themeV2?: boolean;\n    onChange?(values: string[]): void;\n}\n\ntype MultiCheckboxFormFieldProps = CheckboxGroupFormFieldProps &\n    Pick<FieldArrayRenderProps, 'push' | 'remove' | 'pop' | 'form'>;\n\nconst MultiCheckboxFormField: FunctionComponent<MultiCheckboxFormFieldProps> = ({\n    form: { values, errors },\n    id,\n    label,\n    name,\n    onChange = noop,\n    options,\n    push,\n    remove,\n    themeV2,\n}) => {\n    const handleSelectAll = useCallback(() => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        difference(\n            options.map(({ value }) => value),\n            checkedValues,\n        ).forEach((val) => push(val));\n\n        onChange(getIn(values, name));\n    }, [name, onChange, options, push, values]);\n\n    const handleSelectNone = useCallback(() => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        checkedValues.forEach(() => remove(0));\n\n        onChange(getIn(values, name));\n    }, [name, onChange, remove, values]);\n\n    const handleInputChange = useCallback(\n        (event: ChangeEvent<HTMLInputElement>) => {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const checkedValues: string[] = getIn(values, name) || [];\n            const { value, checked } = event.target;\n\n            if (checked) {\n                push(value);\n            } else {\n                remove(checkedValues.indexOf(value));\n            }\n\n            onChange(getIn(values, name));\n        },\n        [name, onChange, push, remove, values],\n    );\n\n    return (\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        <FormFieldContainer hasError={getIn(errors, name) && getIn(errors, name).length}>\n            {label}\n\n            {options.length > 1 && (\n                <MultiCheckboxControl\n                    onSelectedAll={handleSelectAll}\n                    onSelectedNone={handleSelectNone}\n                    testId={id}\n                    themeV2={themeV2}\n                />\n            )}\n\n            <DynamicInput\n                fieldType={DynamicFormFieldType.CHECKBOX}\n                id={id}\n                name={name}\n                onChange={handleInputChange}\n                options={options}\n                themeV2={themeV2}\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                value={getIn(values, name) || []}\n            />\n\n            <FormFieldError\n                // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n                errorId={`${id ?? name}-field-error-message`}\n                name={name}\n                testId={`${kebabCase(name)}-field-error-message`}\n            />\n        </FormFieldContainer>\n    );\n};\n\nconst CheckboxGroupFormField: FunctionComponent<CheckboxGroupFormFieldProps> = ({\n    id,\n    label,\n    name,\n    onChange,\n    options,\n    themeV2,\n}) => {\n    const renderField = useCallback(\n        (renderProps: FieldArrayRenderProps) => (\n            <MultiCheckboxFormField\n                id={id}\n                label={label}\n                name={name}\n                onChange={onChange}\n                options={options}\n                themeV2={themeV2}\n                {...pick(renderProps, ['form', 'pop', 'push', 'remove'])}\n            />\n        ),\n        [id, label, name, onChange, options, themeV2],\n    );\n\n    return <FieldArray name={name} render={renderField} />;\n};\n\nexport default memo(CheckboxGroupFormField);\n","import { type FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { type FieldProps } from 'formik';\nimport { includes } from 'lodash';\nimport React, { type FunctionComponent, memo, type ReactNode, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField } from '../FormField';\nimport { Label } from '../Label';\n\nimport CheckboxGroupFormField from './CheckboxGroupFormField';\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\n\nexport interface DynamicFormFieldOption {\n    code: string;\n    name: string;\n}\n\nexport interface DynamicFormFieldProps {\n    field: FormFieldType;\n    inputId?: string;\n    extraClass?: string;\n    autocomplete?: string;\n    parentFieldName?: string;\n    placeholder?: string;\n    label?: ReactNode;\n    isFloatingLabelEnabled?: boolean;\n    themeV2?: boolean;\n    onChange?(value: string | string[]): void;\n}\n\nconst DynamicFormField: FunctionComponent<DynamicFormFieldProps> = ({\n    field: {\n        fieldType,\n        type,\n        secret,\n        name,\n        label: fieldLabel,\n        required,\n        options,\n        max,\n        min,\n        maxLength,\n    },\n    parentFieldName,\n    onChange,\n    placeholder,\n    inputId,\n    autocomplete,\n    label,\n    extraClass,\n    isFloatingLabelEnabled,\n    themeV2 = false,\n}) => {\n    const fieldInputId = inputId || name;\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\n    const isFloatingLabelSupportedFieldType = Boolean(\n        isFloatingLabelEnabled &&\n            (includes(['text', 'password', 'dropdown', 'date', 'multiline'], fieldType) ||\n                !fieldType),\n    );\n    const labelComponent = useMemo(() => {\n        let labelClassName = '';\n\n        if (themeV2) {\n            if (isFloatingLabelSupportedFieldType) {\n                labelClassName = 'floating-form-field-label';\n            } else {\n                labelClassName = 'body-medium';\n            }\n        }\n\n        return (\n            <Label\n                additionalClassName={labelClassName}\n                htmlFor={fieldInputId}\n                id={`${fieldInputId}-label`}\n                isFloatingLabelEnabled={isFloatingLabelSupportedFieldType}\n            >\n                {label || fieldLabel}\n                {!required && (\n                    <>\n                        {' '}\n                        <small className=\"optimizedCheckout-contentSecondary\">\n                            <TranslatedString id=\"common.optional_text\" />\n                        </small>\n                    </>\n                )}\n            </Label>\n        );\n    }, [themeV2, fieldInputId, isFloatingLabelSupportedFieldType, label, fieldLabel, required]);\n\n    const dynamicFormFieldType = useMemo((): DynamicFormFieldType => {\n        if (fieldType === 'text') {\n            if (type === 'integer') {\n                return DynamicFormFieldType.NUMBER;\n            }\n\n            if (includes(name, 'phone') || includes(name, 'tel')) {\n                return DynamicFormFieldType.TELEPHONE;\n            }\n\n            return secret ? DynamicFormFieldType.PASSWORD : DynamicFormFieldType.TEXT;\n        }\n\n        return fieldType as DynamicFormFieldType;\n    }, [fieldType, type, secret, name]);\n\n    const renderInput = useCallback(\n        ({ field }: FieldProps<string>) => (\n            <DynamicInput\n                {...field}\n                aria-labelledby={`${fieldInputId}-label ${fieldInputId}-field-error-message`}\n                autoComplete={autocomplete}\n                fieldType={dynamicFormFieldType}\n                id={fieldInputId}\n                isFloatingLabelEnabled={isFloatingLabelSupportedFieldType}\n                max={max}\n                maxLength={maxLength || undefined}\n                min={min}\n                options={options && options.items}\n                placeholder={placeholder || (options && options.helperLabel)}\n                rows={options?.rows}\n                themeV2={themeV2}\n            />\n        ),\n        [\n            fieldInputId,\n            autocomplete,\n            dynamicFormFieldType,\n            isFloatingLabelSupportedFieldType,\n            max,\n            maxLength,\n            min,\n            options,\n            placeholder,\n            themeV2,\n        ],\n    );\n\n    return (\n        <div\n            className={classNames(\n                'dynamic-form-field',\n                { 'floating-form-field': isFloatingLabelSupportedFieldType },\n                extraClass,\n            )}\n        >\n            {fieldType === DynamicFormFieldType.CHECKBOX ? (\n                <CheckboxGroupFormField\n                    id={fieldInputId}\n                    label={labelComponent}\n                    name={fieldName}\n                    onChange={onChange}\n                    options={(options && options.items) || []}\n                    themeV2={themeV2}\n                />\n            ) : (\n                <FormField\n                    id={fieldInputId}\n                    input={renderInput}\n                    isFloatingLabelEnabled={isFloatingLabelSupportedFieldType}\n                    label={labelComponent}\n                    name={fieldName}\n                    onChange={onChange}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default memo(DynamicFormField);\n","import classNames from 'classnames';\nimport React, { forwardRef, type ReactNode, type Ref } from 'react';\n\nimport { Input, type InputProps } from '../Input';\nimport { Label } from '../Label';\n\nexport interface CheckboxInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n    themeV2?: boolean;\n}\n\nconst CheckboxInput = forwardRef(\n    (\n        { additionalClassName, label, id, themeV2, ...rest }: CheckboxInputProps,\n        ref: Ref<HTMLInputElement>,\n    ) => (\n        <>\n            <Input\n                {...rest}\n                className={classNames(\n                    'form-checkbox',\n                    'optimizedCheckout-form-checkbox',\n                    { 'floating-form-field-input': themeV2 },\n                    additionalClassName,\n                )}\n                id={id}\n                ref={ref}\n                type=\"checkbox\"\n            />\n            <Label htmlFor={id}>{label}</Label>\n        </>\n    ),\n);\n\nexport default CheckboxInput;\n","import { type CheckoutSettings } from '@bigcommerce/checkout-sdk';\n\nexport default function isFloatingLabelEnabled(checkoutSettings: CheckoutSettings): boolean {\n    return Boolean(checkoutSettings.checkoutUserExperienceSettings.floatingLabelEnabled);\n}\n","import classNames from 'classnames';\nimport React, { type FunctionComponent, memo, type ReactNode } from 'react';\n\nimport { FormContext } from '../contexts';\n\nexport interface FormFieldContainerProps {\n    additionalClassName?: string;\n    children?: ReactNode;\n    className?: string;\n    hasError?: boolean;\n    testId?: string;\n}\n\nconst FormFieldContainer: FunctionComponent<FormFieldContainerProps> = ({\n    additionalClassName,\n    children,\n    className,\n    hasError,\n    testId,\n}) => (\n    <FormContext.Consumer>\n        {({ isSubmitted }) => (\n            <div\n                className={\n                    className ||\n                    classNames('form-field', additionalClassName, {\n                        'form-field--error': hasError && isSubmitted,\n                    })\n                }\n                data-test={testId}\n            >\n                {children}\n            </div>\n        )}\n    </FormContext.Consumer>\n);\n\nexport default memo(FormFieldContainer);\n","import { Field, type FieldConfig, type FieldProps, getIn } from 'formik';\nimport { isDate, noop } from 'lodash';\nimport React, {\n    createElement,\n    type FunctionComponent,\n    memo,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n} from 'react';\nimport shallowEqual from 'shallowequal';\n\nimport { FormFieldContainer } from '../FormFieldContainer';\n\nexport interface BasicFormFieldProps extends FieldConfig {\n    additionalClassName?: string;\n    className?: string;\n    testId?: string;\n    onChange?(value: unknown): void;\n}\n\ntype InnerFieldInputProps = FieldProps &\n    Pick<FieldConfig, 'component' | 'render'> & {\n        onChange?(value: string): void;\n    };\n\ntype InnerFieldProps = Omit<BasicFormFieldProps, keyof FieldConfig> & InnerFieldInputProps;\n\nconst InnerFieldInput: FunctionComponent<InnerFieldInputProps> = ({\n    field,\n    onChange = noop,\n    component = 'input',\n    render,\n    ...props\n}) => {\n    const prevValueRef = useRef<unknown>(field.value);\n\n    useEffect(() => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const comparableValue = isDate(field.value) ? field.value.getTime() : field.value;\n        const comparablePrevValue = isDate(prevValueRef.current)\n            ? prevValueRef.current.getTime()\n            : prevValueRef.current;\n\n        if (comparableValue !== comparablePrevValue) {\n            onChange(field.value);\n        }\n\n        prevValueRef.current = field.value;\n    }, [field.value, onChange]);\n\n    if (render) {\n        return render({ field, ...props });\n    }\n\n    if (typeof component === 'string') {\n        return createElement(component, field);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return createElement(component as any, { field, ...props });\n};\n\nconst InnerField: FunctionComponent<InnerFieldProps> = memo(\n    ({ additionalClassName, component, field, form, onChange, render, testId }) => {\n        const input = useMemo(\n            () => (\n                <InnerFieldInput\n                    component={component}\n                    field={field}\n                    form={form}\n                    meta={form.getFieldMeta(field.name)}\n                    onChange={onChange}\n                    render={render}\n                />\n            ),\n            [field, form, onChange, component, render],\n        );\n\n        return (\n            <FormFieldContainer\n                additionalClassName={additionalClassName}\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                hasError={getIn(form.errors, field.name)}\n                testId={testId}\n            >\n                {input}\n            </FormFieldContainer>\n        );\n    },\n    (\n        { form: prevForm, field: prevField, ...prevProps },\n        { form: nextForm, field: nextField, ...nextProps },\n    ) =>\n        shallowEqual(prevProps, nextProps) &&\n        shallowEqual(prevForm, nextForm) &&\n        shallowEqual(prevField, nextField),\n);\n\nconst BasicFormField: FunctionComponent<BasicFormFieldProps> = ({\n    additionalClassName,\n    className,\n    component,\n    render,\n    testId,\n    onChange,\n    ...rest\n}) => {\n    const renderInnerField = useCallback(\n        (props: FieldProps) => (\n            <InnerField\n                {...props}\n                additionalClassName={additionalClassName}\n                className={className}\n                component={component}\n                onChange={onChange}\n                render={render}\n                testId={testId}\n            />\n        ),\n        [additionalClassName, className, component, render, testId, onChange],\n    );\n\n    return <Field {...rest}>{renderInnerField}</Field>;\n};\n\nexport default memo(BasicFormField);\n"],"names":["children","className","hidden","testId","isFloatingLabelEnabled","additionalClassName","rest","mapCustomFormFieldsFromFormValues","customFieldsObject","customFields","forIn","value","key","fieldValue","isDate","padMonth","padStart","getMonth","toString","padDay","getDate","getFullYear","push","fieldId","forwardRef","ref","appearFocused","type","themeV2","placeholder","name","includes","createInjectHoc","LocaleContext","displayNamePrefix","pickProps","height","viewBox","width","xmlns","d","ReactDatePicker","lazy","memo","fieldType","id","onChange","noop","options","date","inputDateFormat","inputFormat","handleDateChange","useCallback","dateValue","event","target","DynamicFormFieldType","DROPDOWM","map","label","optionValue","RADIO","length","RadioInput","checked","CHECKBOX","CheckboxInput","Array","isArray","DATE","Suspense","autoComplete","calendarClassName","dateFormat","maxDate","max","Date","undefined","minDate","min","placeholderText","toUpperCase","popperClassName","selected","MULTILINE","TextInput","PASSWORD","htmlFor","errorId","renderMessage","message","role","Consumer","isSubmitted","render","labelContent","footer","input","renderField","props","kebabCase","disabled","field","onSelectedAll","onSelectedNone","handleSelectAllClick","preventDefault","handleSelectNoneClick","TranslatedString","href","onClick","MultiCheckboxFormField","form","values","errors","remove","handleSelectAll","checkedValues","difference","forEach","val","handleSelectNone","handleInputChange","indexOf","FormFieldContainer","hasError","DynamicInput","FormFieldError","renderProps","pick","secret","fieldLabel","required","maxLength","parentFieldName","inputId","autocomplete","extraClass","fieldInputId","fieldName","isFloatingLabelSupportedFieldType","Boolean","labelComponent","useMemo","labelClassName","Label","dynamicFormFieldType","NUMBER","TELEPHONE","TEXT","renderInput","items","helperLabel","rows","FormField","checkoutSettings","checkoutUserExperienceSettings","floatingLabelEnabled","InnerFieldInput","component","prevValueRef","useRef","useEffect","getTime","current","createElement","InnerField","meta","getFieldMeta","prevForm","prevField","prevProps","nextForm","nextField","nextProps","renderInnerField"],"sourceRoot":""}