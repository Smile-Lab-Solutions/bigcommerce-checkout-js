{"version":3,"file":"braintree-credit-card-payment-method-2d6d9b29.js","mappings":"8NA4BA,MAuFA,GAAe,QArFV,I,IAAA,qBACDA,EAAoB,sCACpBC,EAAqC,eACrCC,EAAc,iCACdC,EAAgC,uBAChCC,EAAsB,kBACtBC,EAAiB,iBACjBC,EAAmB,EAAAC,MAAI,EACpBC,GAAI,cARN,sLAUD,MAAOC,EAAqBC,IAA0B,IAAAC,YAChDC,GAAM,IAAAC,QAA4C,CACpDC,wBAAwB,IAAAC,eAGtBC,GACF,IAAAC,cACI,CAAOC,EAASC,KAAuB,iDACnC,OAAOd,EAAkB,OAAD,wBACjBa,GAAO,CACVE,aAAc,CAAC,MACfC,UAAW,CACPC,aAAc,CACV,QAAAC,CAASC,EAAOC,EAASC,GACrB,GAAIF,EACA,OAAOlB,EAAiBkB,GAG5Bd,EAAuBe,GACvBb,EAAIe,QAAQC,+BAAiCF,CACjD,EACA,WAAAG,GACInB,OAAuBoB,GACvBlB,EAAIe,QAAQC,oCAAiCE,CACjD,GAEJC,KACI/B,UACOA,EAAqBmB,OAG5C,KACA,CAACnB,EAAsBK,EAAmBC,IAG5C0B,GAA4B,IAAAf,cAAY,KACtCL,EAAIe,QAAQb,uBAAuBa,SAAWlB,GAC9CG,EAAIe,QAAQb,uBAAuBa,QAAQM,YAAYxB,KAE5D,CAACA,IAEEyB,GAA8B,IAAAjB,cAAY,KAC5CP,OAAuBoB,GAEnBlB,EAAIe,QAAQC,iCACZhB,EAAIe,QAAQC,iCACZhB,EAAIe,QAAQC,oCAAiCE,KAElD,IAEH,OACI,gCACI,gBAAC,IAAuB,iBAChBtB,EAAI,CACR2B,aAAcjC,EACdkC,qBAAsBhC,EACtBiC,gCAAiCpC,EACjCI,kBAAmBW,EACnBV,iBAAkBA,EAClBgC,2BAA4BnC,KAGhC,gBAAC,IAAK,CACFoC,wBAAwB,qBACxBC,iBAAkB,gBAAC,IAAgB,CAACC,GAAG,wBACvCC,SAAUjC,EACVkC,YAAaX,EACbY,eAAgBV,GAEhB,uBAAKtB,IAAKA,EAAIe,QAAQb,6B,kDC3GvB,SAAS+B,EACpBC,EACAC,EACAC,GAEA,MAAMC,EAAcC,OAAOC,iBAAiBL,EAASE,GAErD,OAAOD,EAAWK,QACd,CAACC,EAAQC,IAAkB,OAAD,wBACnBD,GAAM,CACT,CAACC,GAAeL,EAAYM,kBAAiB,IAAAC,WAAUF,OAE3D,CAAC,EAET,C,2CChBO,MAAMG,EAAwB,eACxBC,EAAqC,uB","sources":["webpack://checkout/./packages/core/src/app/payment/paymentMethod/BraintreeCreditCardPaymentMethod.tsx","webpack://checkout/./packages/dom-utils/src/getAppliedStyles.ts","webpack://checkout/./packages/payment-integration-api/src/CheckoutRootWrapperIds.ts"],"sourcesContent":["import { noop } from 'lodash';\nimport React, {\n    createRef,\n    type FunctionComponent,\n    type RefObject,\n    useCallback,\n    useRef,\n    useState,\n} from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Modal } from '../../ui/modal';\nimport {\n    withHostedCreditCardFieldset,\n    type WithInjectedHostedCreditCardFieldsetProps,\n} from '../hostedCreditCard';\n\nimport CreditCardPaymentMethod, { type CreditCardPaymentMethodProps } from './CreditCardPaymentMethod';\nimport { createBraintreeCreditCardPaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/braintree';\n\nexport type BraintreeCreditCardPaymentMethodProps = CreditCardPaymentMethodProps;\n\ninterface BraintreeCreditCardPaymentMethodRef {\n    threeDSecureContentRef: RefObject<HTMLDivElement>;\n    cancelThreeDSecureVerification?(): void;\n}\n\nconst BraintreeCreditCardPaymentMethod: FunctionComponent<\n    BraintreeCreditCardPaymentMethodProps & WithInjectedHostedCreditCardFieldsetProps\n> = ({\n    getHostedFormOptions,\n    getHostedStoredCardValidationFieldset,\n    hostedFieldset,\n    hostedStoredCardValidationSchema,\n    hostedValidationSchema,\n    initializePayment,\n    onUnhandledError = noop,\n    ...rest\n}) => {\n    const [threeDSecureContent, setThreeDSecureContent] = useState<HTMLElement>();\n    const ref = useRef<BraintreeCreditCardPaymentMethodRef>({\n        threeDSecureContentRef: createRef(),\n    });\n\n    const initializeBraintreePayment: BraintreeCreditCardPaymentMethodProps['initializePayment'] =\n        useCallback(\n            async (options, selectedInstrument) => {\n                return initializePayment({\n                    ...options,\n                    integrations: [createBraintreeCreditCardPaymentStrategy],\n                    braintree: {\n                        threeDSecure: {\n                            addFrame(error, content, cancel) {\n                                if (error) {\n                                    return onUnhandledError(error);\n                                }\n\n                                setThreeDSecureContent(content);\n                                ref.current.cancelThreeDSecureVerification = cancel;\n                            },\n                            removeFrame() {\n                                setThreeDSecureContent(undefined);\n                                ref.current.cancelThreeDSecureVerification = undefined;\n                            },\n                        },\n                        form:\n                            getHostedFormOptions &&\n                            (await getHostedFormOptions(selectedInstrument)),\n                    },\n                });\n            },\n            [getHostedFormOptions, initializePayment, onUnhandledError],\n        );\n\n    const appendThreeDSecureContent = useCallback(() => {\n        if (ref.current.threeDSecureContentRef.current && threeDSecureContent) {\n            ref.current.threeDSecureContentRef.current.appendChild(threeDSecureContent);\n        }\n    }, [threeDSecureContent]);\n\n    const cancelThreeDSecureModalFlow = useCallback(() => {\n        setThreeDSecureContent(undefined);\n\n        if (ref.current.cancelThreeDSecureVerification) {\n            ref.current.cancelThreeDSecureVerification();\n            ref.current.cancelThreeDSecureVerification = undefined;\n        }\n    }, []);\n\n    return (\n        <>\n            <CreditCardPaymentMethod\n                {...rest}\n                cardFieldset={hostedFieldset}\n                cardValidationSchema={hostedValidationSchema}\n                getStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n                initializePayment={initializeBraintreePayment}\n                onUnhandledError={onUnhandledError}\n                storedCardValidationSchema={hostedStoredCardValidationSchema}\n            />\n\n            <Modal\n                additionalBodyClassName=\"modal-body--center\"\n                closeButtonLabel={<TranslatedString id=\"common.close_action\" />}\n                isOpen={!!threeDSecureContent}\n                onAfterOpen={appendThreeDSecureContent}\n                onRequestClose={cancelThreeDSecureModalFlow}\n            >\n                <div ref={ref.current.threeDSecureContentRef} />\n            </Modal>\n        </>\n    );\n};\n\nexport default withHostedCreditCardFieldset(BraintreeCreditCardPaymentMethod);\n","import { kebabCase } from 'lodash';\n\nexport default function getAppliedStyles(\n    element: HTMLElement,\n    properties: string[],\n    pseudoElementSelector?: string,\n): { [key: string]: string } {\n    const declaration = window.getComputedStyle(element, pseudoElementSelector);\n\n    return properties.reduce(\n        (result, propertyName) => ({\n            ...result,\n            [propertyName]: declaration.getPropertyValue(kebabCase(propertyName)),\n        }),\n        {},\n    );\n}\n","export const CHECKOUT_ROOT_NODE_ID = 'checkout-app';\nexport const MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID = 'micro-app-ng-checkout';\n"],"names":["getHostedFormOptions","getHostedStoredCardValidationFieldset","hostedFieldset","hostedStoredCardValidationSchema","hostedValidationSchema","initializePayment","onUnhandledError","noop","rest","threeDSecureContent","setThreeDSecureContent","useState","ref","useRef","threeDSecureContentRef","createRef","initializeBraintreePayment","useCallback","options","selectedInstrument","integrations","braintree","threeDSecure","addFrame","error","content","cancel","current","cancelThreeDSecureVerification","removeFrame","undefined","form","appendThreeDSecureContent","appendChild","cancelThreeDSecureModalFlow","cardFieldset","cardValidationSchema","getStoredCardValidationFieldset","storedCardValidationSchema","additionalBodyClassName","closeButtonLabel","id","isOpen","onAfterOpen","onRequestClose","getAppliedStyles","element","properties","pseudoElementSelector","declaration","window","getComputedStyle","reduce","result","propertyName","getPropertyValue","kebabCase","CHECKOUT_ROOT_NODE_ID","MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID"],"sourceRoot":""}