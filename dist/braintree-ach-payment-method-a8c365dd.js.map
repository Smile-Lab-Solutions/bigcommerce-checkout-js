{"version":3,"file":"braintree-ach-payment-method-a8c365dd.js","mappings":"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","sources":["webpack://checkout/./packages/ui/src/form/TextInput/TextInput.tsx","webpack://checkout/./packages/locale/src/withDate.tsx","webpack://checkout/./packages/ui/src/icon/IconChevronDown.tsx","webpack://checkout/./packages/ui/src/form/TextArea/TextArea.tsx","webpack://checkout/./packages/ui/src/form/DynamicFormField/DynamicInput.tsx","webpack://checkout/./packages/ui/src/form/RadioInput/RadioInput.tsx","webpack://checkout/./packages/ui/src/form/FormField/FormField.tsx","webpack://checkout/./packages/hosted-payment-integration/src/components/HostedPaymentComponent.tsx","webpack://checkout/./packages/ui/src/form/DynamicFormField/MultiCheckboxControl.tsx","webpack://checkout/./packages/ui/src/form/DynamicFormField/CheckboxGroupFormField.tsx","webpack://checkout/./packages/ui/src/form/DynamicFormField/DynamicFormField.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/constants.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/hooks/useBraintreeAchInstruments.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/hooks/useBraintreeAchValidation.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/components/BraintreeAchFormFields.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/components/BraintreeAchMandateText.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/components/BraintreeAchPaymentForm.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/BraintreeAchPaymentMethod.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/hooks/useBraintreeFastlaneInstruments.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/components/BraintreeFastlaneCreditCardForm.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/components/BraintreeFastlaneInstrumentsForm.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/components/BraintreeFastlaneForm.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/index.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/BraintreeFastlanePaymentMethod.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeLocalPaymentMethod.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreePaypalPaymentMethod.tsx","webpack://checkout/./packages/braintree-integration/src/VisaCheckout/VisaCheckoutPaymentMethod.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeVenmo/BraintreeVenmoPaymentMethod.tsx","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentFeatureAvailable/isInstrumentFeatureAvailable.ts","webpack://checkout/./packages/wallet-button-integration/src/normalizeWalletPaymentData.ts","webpack://checkout/./packages/payment-integration-api/src/PaymentMethodType.ts","webpack://checkout/./packages/payment-integration-api/src/getPaymentMethodName.ts","webpack://checkout/./packages/instrument-utils/src/storedInstrument/SignOutLink/SignOutLink.tsx","webpack://checkout/./packages/wallet-button-integration/src/PaymentView.tsx","webpack://checkout/./packages/wallet-button-integration/src/SignInView.tsx","webpack://checkout/./packages/wallet-button-integration/src/WalletButtonPaymentMethodComponent.tsx"],"sourcesContent":["import classNames from 'classnames';\nimport React, { forwardRef, type Ref } from 'react';\n\nimport { Input, type InputProps } from '../Input';\n\nexport interface TextInputProps extends InputProps {\n    additionalClassName?: string;\n    appearFocused?: boolean;\n    type?: 'text' | 'password' | 'tel' | 'email' | 'number';\n    isFloatingLabelEnabled?: boolean;\n    themeV2?: boolean;\n}\n\nconst TextInput = forwardRef(\n    (\n        {\n            additionalClassName,\n            isFloatingLabelEnabled,\n            appearFocused,\n            type = 'text',\n            themeV2 = false,\n            ...rest\n        }: TextInputProps,\n        ref: Ref<HTMLInputElement>,\n    ) => (\n        <Input\n            {...rest}\n            className={classNames(\n                'form-input',\n                'optimizedCheckout-form-input',\n                { 'form-input--focus': appearFocused },\n                { 'optimizedCheckout-form-input--focus': appearFocused },\n                additionalClassName,\n                { 'floating-form-field-input': themeV2 && isFloatingLabelEnabled },\n                { 'body-regular': themeV2 && !isFloatingLabelEnabled },\n            )}\n            isFloatingLabelEnabled={isFloatingLabelEnabled}\n            ref={ref}\n            type={type}\n        />\n    ),\n);\n\nexport default TextInput;\n","import { createInjectHoc, type InjectHoc } from '@bigcommerce/checkout/legacy-hoc';\n\nimport LocaleContext from './LocaleContext';\n\nexport interface WithDateProps {\n    date: {\n        inputFormat: string;\n    };\n}\n\nconst withDate: InjectHoc<WithDateProps> = createInjectHoc(LocaleContext, {\n    displayNamePrefix: 'withDate',\n    pickProps: (value, key) => key === 'date' && !!value,\n});\n\nexport default withDate;\n","import React, { type FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconChevronDown: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconChevronDown);\n","import classNames from 'classnames';\nimport React, { forwardRef, type Ref, type TextareaHTMLAttributes } from 'react';\n\nexport interface TextAreaProps extends TextareaHTMLAttributes<HTMLTextAreaElement> {\n    additionalClassName?: string;\n    testId?: string;\n    isFloatingLabelEnabled?: boolean;\n}\n\nconst TextArea = forwardRef(\n    (\n        { additionalClassName, testId, className, isFloatingLabelEnabled, ...rest }: TextAreaProps,\n        ref: Ref<HTMLTextAreaElement>,\n    ) => {\n        return (\n            <textarea\n                {...rest}\n                className={\n                    className ||\n                    classNames(\n                        { 'floating-textarea': isFloatingLabelEnabled },\n                        'form-input',\n                        'optimizedCheckout-form-input',\n                        additionalClassName,\n                    )\n                }\n                data-test={testId}\n                ref={ref}\n            />\n        );\n    },\n);\n\nexport default TextArea;\n","import { type FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { isDate, noop } from 'lodash';\nimport React, { type FunctionComponent, lazy, memo, Suspense, useCallback } from 'react';\n\nimport { withDate, type WithDateProps } from '@bigcommerce/checkout/locale';\n\nimport { IconChevronDown } from '../../icon';\nimport { CheckboxInput } from '../CheckboxInput';\nimport { type InputProps } from '../Input';\nimport { RadioInput } from '../RadioInput';\nimport { TextArea } from '../TextArea';\nimport { TextInput } from '../TextInput';\n\nimport DynamicFormFieldType from './DynamicFormFieldType';\n\nconst ReactDatePicker = lazy(\n    () =>\n        import(\n            /* webpackChunkName: \"react-datepicker\" */\n            'react-datepicker'\n        ),\n);\n\nexport interface DynamicInputProps extends InputProps {\n    id: string;\n    additionalClassName?: string;\n    value?: string | string[];\n    rows?: number;\n    fieldType?: DynamicFormFieldType;\n    options?: FormFieldItem[];\n    isFloatingLabelEnabled?: boolean;\n    themeV2?: boolean;\n    inputDateFormat?: string;\n}\n\nconst DynamicInput: FunctionComponent<DynamicInputProps & WithDateProps> = ({\n    fieldType,\n    id,\n    name,\n    onChange = noop,\n    options,\n    placeholder,\n    value,\n    isFloatingLabelEnabled,\n    themeV2 = false,\n    date,\n    inputDateFormat,\n    ...rest\n}) => {\n    const inputFormat = inputDateFormat || date.inputFormat || '';\n\n    const handleDateChange = useCallback(\n        (dateValue: string, event: any) =>\n            onChange({\n                ...event,\n                target: {\n                    name,\n                    value: dateValue,\n                },\n            }),\n        [onChange, name],\n    );\n\n    switch (fieldType) {\n        case DynamicFormFieldType.DROPDOWM:\n            return (\n                <>\n                    <div\n                        className={classNames(\n                            { 'dropdown-chevron': !isFloatingLabelEnabled },\n                            { 'floating-select-chevron': isFloatingLabelEnabled },\n                        )}\n                    >\n                        <IconChevronDown />\n                    </div>\n                    <select\n                        {...(rest as any)}\n                        className={classNames(\n                            { 'floating-select': isFloatingLabelEnabled },\n                            'form-select optimizedCheckout-form-select',\n                            { 'floating-form-field-input': themeV2 },\n                        )}\n                        data-test={`${id}-select`}\n                        id={id}\n                        name={name}\n                        onChange={onChange}\n                        value={value ?? ''}\n                    >\n                        {!!placeholder && <option value=\"\">{placeholder}</option>}\n                        {options &&\n                            options.map(({ label, value: optionValue }) => (\n                                <option key={optionValue} value={optionValue}>\n                                    {label}\n                                </option>\n                            ))}\n                    </select>\n                </>\n            );\n\n        case DynamicFormFieldType.RADIO:\n            if (!options || !options.length) {\n                return null;\n            }\n\n            return (\n                <>\n                    {options.map(({ label, value: optionValue }) => (\n                        <RadioInput\n                            {...rest}\n                            checked={optionValue === value}\n                            id={`${id}-${optionValue}`}\n                            key={optionValue}\n                            label={label}\n                            name={name}\n                            onChange={onChange}\n                            testId={`${id}-${optionValue}-radio`}\n                            themeV2={themeV2}\n                            value={optionValue}\n                        />\n                    ))}\n                </>\n            );\n\n        case DynamicFormFieldType.CHECKBOX:\n            if (!options || !options.length) {\n                return null;\n            }\n\n            return (\n                <>\n                    {options.map(({ label, value: optionValue }) => (\n                        <CheckboxInput\n                            {...rest}\n                            checked={Array.isArray(value) ? value.includes(optionValue) : false}\n                            id={`${id}-${optionValue}`}\n                            key={optionValue}\n                            label={label}\n                            name={name}\n                            onChange={onChange}\n                            testId={`${id}-${optionValue}-checkbox`}\n                            themeV2={themeV2}\n                            value={optionValue}\n                        />\n                    ))}\n                </>\n            );\n\n        case DynamicFormFieldType.DATE:\n            return (\n                <Suspense>\n                    <ReactDatePicker\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        {...(rest as any)}\n                        autoComplete=\"off\"\n                        // FIXME: we can avoid this by simply using onChangeRaw, but it's not being triggered properly\n                        // https://github.com/Hacker0x01/react-datepicker/issues/1357\n                        // onChangeRaw={ rest.onChange }\n                        calendarClassName=\"optimizedCheckout-contentPrimary\"\n                        className={classNames('form-input optimizedCheckout-form-input', {\n                            'floating-input': isFloatingLabelEnabled,\n                            'floating-form-field-input': themeV2,\n                        })}\n                        dateFormat={inputFormat}\n                        maxDate={rest.max ? new Date(`${rest.max}T00:00:00Z`) : undefined}\n                        minDate={rest.min ? new Date(`${rest.min}T00:00:00Z`) : undefined}\n                        name={name}\n                        onChange={handleDateChange}\n                        placeholderText={inputFormat.toUpperCase()}\n                        popperClassName=\"optimizedCheckout-contentPrimary\"\n                        selected={isDate(value) ? value : undefined}\n                    />\n                </Suspense>\n            );\n\n        case DynamicFormFieldType.MULTILINE:\n            return (\n                <TextArea\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    {...(rest as any)}\n                    id={id}\n                    isFloatingLabelEnabled={isFloatingLabelEnabled}\n                    name={name}\n                    onChange={onChange}\n                    testId={`${id}-text`}\n                    themeV2={themeV2}\n                    type={fieldType}\n                    value={value}\n                />\n            );\n\n        default:\n            return (\n                <TextInput\n                    {...rest}\n                    id={id}\n                    isFloatingLabelEnabled={isFloatingLabelEnabled}\n                    name={name}\n                    onChange={onChange}\n                    placeholder={placeholder}\n                    testId={`${id}-${\n                        fieldType === DynamicFormFieldType.PASSWORD ? 'password' : 'text'\n                    }`}\n                    themeV2={themeV2}\n                    type={fieldType}\n                    value={value}\n                />\n            );\n    }\n};\n\nexport default memo(withDate(DynamicInput));\n","import classNames from 'classnames';\nimport React, { forwardRef, type ReactNode, type Ref } from 'react';\n\nimport Input, { type InputProps } from '../Input/Input';\nimport Label from '../Label/Label';\n\nexport interface RadioInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n    themeV2?: boolean;\n}\n\nconst RadioInput = forwardRef(\n    (\n        {\n            additionalClassName,\n            label,\n            value,\n            checked,\n            id,\n            themeV2 = false,\n            ...rest\n        }: RadioInputProps,\n        ref: Ref<HTMLInputElement>,\n    ) => (\n        <>\n            <Input\n                {...rest}\n                checked={checked}\n                className={classNames(\n                    'form-radio',\n                    'optimizedCheckout-form-radio',\n                    additionalClassName,\n                )}\n                id={id}\n                ref={ref}\n                type=\"radio\"\n                value={value}\n            />\n            <Label additionalClassName={themeV2 ? 'body-regular' : ''} htmlFor={id}>\n                {label}\n            </Label>\n        </>\n    ),\n);\n\nexport default RadioInput;\n","import { type FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { type FunctionComponent, memo, type ReactNode, useCallback } from 'react';\n\nimport { BasicFormField } from '../BasicFormField';\nimport { FormFieldError } from '../FormFieldError';\nimport { Label } from '../Label';\n\nexport interface FormFieldProps {\n    additionalClassName?: string;\n    name: string;\n    label?: ReactNode | ((fieldName: string) => ReactNode);\n    labelContent?: ReactNode;\n    footer?: ReactNode;\n    id?: string;\n    isFloatingLabelEnabled?: boolean;\n    themeV2?: boolean;\n    input(field: FieldProps<string>): ReactNode;\n    onChange?(value: string): void;\n}\n\nconst FormField: FunctionComponent<FormFieldProps> = ({\n    additionalClassName,\n    labelContent,\n    label,\n    onChange,\n    footer,\n    input,\n    name,\n    id,\n    isFloatingLabelEnabled,\n    themeV2 = false,\n}) => {\n    const renderField = useCallback(\n        (props: FieldProps<string>) => (\n            <>\n                {isFloatingLabelEnabled && input(props)}\n\n                {label !== undefined && (typeof label === 'function' ? label(name) : label)}\n                {labelContent !== undefined && !label && (\n                    <Label\n                        additionalClassName={themeV2 ? 'floating-form-field-label' : ''}\n                        htmlFor={name}\n                        id={`${id ?? name}-label`}\n                        isFloatingLabelEnabled={isFloatingLabelEnabled}\n                    >\n                        {labelContent}\n                    </Label>\n                )}\n\n                {!isFloatingLabelEnabled && input(props)}\n\n                <FormFieldError\n                    errorId={`${id ?? name}-field-error-message`}\n                    name={name}\n                    testId={`${kebabCase(name)}-field-error-message`}\n                />\n\n                {footer}\n            </>\n        ),\n        [isFloatingLabelEnabled, input, label, name, labelContent, themeV2, id, footer],\n    );\n\n    return (\n        <BasicFormField\n            additionalClassName={additionalClassName}\n            name={name}\n            onChange={onChange}\n            render={renderField}\n        />\n    );\n};\n\nexport default memo(FormField);\n","import {\n    type AccountInstrument,\n    type CheckoutSelectors,\n    type CheckoutService,\n    type LanguageService,\n    type PaymentInitializeOptions,\n    type PaymentInstrument,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { find, noop } from 'lodash';\nimport React, { type ReactNode, useCallback, useEffect, useState } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    isAccountInstrument,\n    isInstrumentFeatureAvailable,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { type PaymentFormService } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface HostedPaymentComponentProps {\n    checkoutService: CheckoutService;\n    checkoutState: CheckoutSelectors;\n    description?: ReactNode;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    language: LanguageService;\n    method: PaymentMethod;\n    paymentForm: PaymentFormService;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface HostedPaymentComponentDerivedProps {\n    instruments: AccountInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isNewAddress: boolean;\n    isPaymentDataRequired: boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n}\n\nfunction getHostedPaymentMethodDerivedProps(\n    props: HostedPaymentComponentProps,\n): HostedPaymentComponentDerivedProps {\n    const filterAccountInstruments = memoizeOne((instruments: PaymentInstrument[] = []) =>\n        instruments.filter(isAccountInstrument),\n    );\n    const filterTrustedInstruments = memoizeOne((instruments: AccountInstrument[] = []) =>\n        instruments.filter(({ trustedShippingAddress }) => trustedShippingAddress),\n    );\n    const { checkoutService, checkoutState, isUsingMultiShipping = false, method } = props;\n\n    const {\n        data: {\n            getCart,\n            getConfig,\n            getCustomer,\n            getInstruments,\n            isPaymentDataRequired,\n            isPaymentDataSubmitted,\n        },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const cart = getCart();\n    const config = getConfig();\n    const customer = getCustomer();\n\n    if (!config || !cart || !customer) {\n        throw new Error('Unable to get checkout');\n    }\n\n    const currentMethodInstruments = filterAccountInstruments(getInstruments(method));\n    const trustedInstruments = filterTrustedInstruments(currentMethodInstruments);\n\n    return {\n        instruments: trustedInstruments,\n        isNewAddress: trustedInstruments.length === 0 && currentMethodInstruments.length > 0,\n        isInstrumentFeatureAvailable:\n            !isPaymentDataSubmitted(method.id, method.gateway) &&\n            isInstrumentFeatureAvailable({\n                config,\n                customer,\n                isUsingMultiShipping,\n                paymentMethod: method,\n            }),\n        isLoadingInstruments: isLoadingInstruments(),\n        isPaymentDataRequired: isPaymentDataRequired(),\n        loadInstruments: checkoutService.loadInstruments,\n    };\n}\n\nconst HostedPaymentMethodComponent: React.FC<HostedPaymentComponentProps> = (props) => {\n    const {\n        description,\n        isInitializing = false,\n        initializePayment,\n        method,\n        onUnhandledError = noop,\n        deinitializePayment,\n    } = props;\n\n    const [isAddingNewInstrument, setIsAddingNewInstrument] = useState(false);\n    const [selectedInstrument, setSelectedInstrument] = useState<AccountInstrument | undefined>();\n\n    const derivedProps = getHostedPaymentMethodDerivedProps(props);\n    const {\n        isLoadingInstruments,\n        instruments,\n        isNewAddress,\n        isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n        loadInstruments,\n    } = derivedProps;\n\n    const getDefaultInstrument = useCallback((): AccountInstrument | undefined => {\n        if (isAddingNewInstrument || !instruments.length) {\n            return;\n        }\n\n        return find(instruments, { defaultInstrument: true }) || instruments[0];\n    }, [isAddingNewInstrument, instruments]);\n\n    const handleUseNewInstrument = useCallback(() => {\n        setIsAddingNewInstrument(true);\n        setSelectedInstrument(undefined);\n    }, []);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setIsAddingNewInstrument(false);\n            setSelectedInstrument(find(instruments, { bigpayToken: id }));\n        },\n        [instruments],\n    );\n\n    useEffect(() => {\n        const initializePaymentAsync = async () => {\n            try {\n                await initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n\n                if (isInstrumentFeatureAvailableProp) {\n                    await loadInstruments();\n                }\n            } catch (error) {\n                onUnhandledError(error);\n            }\n        };\n\n        void initializePaymentAsync();\n\n        return () => {\n            const deinitializePaymentAsync = async () => {\n                try {\n                    await deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    onUnhandledError(error);\n                }\n            };\n\n            void deinitializePaymentAsync();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const currentSelectedInstrument = selectedInstrument || getDefaultInstrument();\n    const isLoading = isInitializing || isLoadingInstruments;\n    const shouldShowInstrumentFieldset =\n        isInstrumentFeatureAvailableProp && (instruments.length > 0 || isNewAddress);\n\n    if (!description && !isInstrumentFeatureAvailableProp) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <div className=\"paymentMethod paymentMethod--hosted\">\n                {description}\n\n                {shouldShowInstrumentFieldset && (\n                    <AccountInstrumentFieldset\n                        instruments={instruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewInstrument}\n                        selectedInstrument={currentSelectedInstrument}\n                    />\n                )}\n\n                {isInstrumentFeatureAvailableProp && (\n                    <StoreInstrumentFieldset\n                        instrumentId={\n                            currentSelectedInstrument && currentSelectedInstrument.bigpayToken\n                        }\n                        instruments={instruments}\n                        isAccountInstrument={true}\n                    />\n                )}\n            </div>\n        </LoadingOverlay>\n    );\n};\n\nexport default HostedPaymentMethodComponent;\n","/* istanbul ignore file */\n\nimport classNames from 'classnames';\nimport React, { type FunctionComponent, memo, type MouseEvent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport './MultiCheckboxControl.scss';\n\nexport interface MultiCheckboxControlProps {\n    testId?: string;\n    themeV2?: boolean;\n    onSelectedAll(): void;\n    onSelectedNone(): void;\n}\n\nconst MultiCheckboxControl: FunctionComponent<MultiCheckboxControlProps> = ({\n    testId,\n    onSelectedAll,\n    onSelectedNone,\n    themeV2 = false,\n}) => {\n    const handleSelectAllClick = useCallback(\n        (event: MouseEvent) => {\n            event.preventDefault();\n            onSelectedAll();\n        },\n        [onSelectedAll],\n    );\n\n    const handleSelectNoneClick = useCallback(\n        (event: MouseEvent) => {\n            event.preventDefault();\n            onSelectedNone();\n        },\n        [onSelectedNone],\n    );\n\n    return (\n        <ul className={classNames('multiCheckbox--controls', { 'body-regular': themeV2 })}>\n            <li className=\"multiCheckbox--control\">\n                <TranslatedString id=\"address.select\" />\n            </li>\n\n            <li className=\"multiCheckbox--control\">\n                <a\n                    data-test={`${testId}Checkbox-all-button`}\n                    href=\"#\"\n                    onClick={handleSelectAllClick}\n                >\n                    <TranslatedString id=\"address.select_all\" />\n                </a>\n            </li>\n\n            <li className=\"multiCheckbox--control\">\n                <a\n                    data-test={`${testId}Checkbox-none-button`}\n                    href=\"#\"\n                    onClick={handleSelectNoneClick}\n                >\n                    <TranslatedString id=\"address.select_none\" />\n                </a>\n            </li>\n        </ul>\n    );\n};\n\nexport default memo(MultiCheckboxControl);\n","import { type FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport { FieldArray, type FieldArrayRenderProps, getIn } from 'formik';\nimport { difference, kebabCase, noop, pick } from 'lodash';\nimport React, {\n    type ChangeEvent,\n    type FunctionComponent,\n    memo,\n    type ReactNode,\n    useCallback,\n} from 'react';\n\nimport { FormFieldContainer } from '../FormFieldContainer';\nimport { FormFieldError } from '../FormFieldError';\n\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\nimport MultiCheckboxControl from './MultiCheckboxControl';\n\nexport interface CheckboxGroupFormFieldProps {\n    id: string;\n    label: ReactNode;\n    name: string;\n    options: FormFieldItem[];\n    themeV2?: boolean;\n    onChange?(values: string[]): void;\n}\n\ntype MultiCheckboxFormFieldProps = CheckboxGroupFormFieldProps &\n    Pick<FieldArrayRenderProps, 'push' | 'remove' | 'pop' | 'form'>;\n\nconst MultiCheckboxFormField: FunctionComponent<MultiCheckboxFormFieldProps> = ({\n    form: { values, errors },\n    id,\n    label,\n    name,\n    onChange = noop,\n    options,\n    push,\n    remove,\n    themeV2,\n}) => {\n    const handleSelectAll = useCallback(() => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        difference(\n            options.map(({ value }) => value),\n            checkedValues,\n        ).forEach((val) => push(val));\n\n        onChange(getIn(values, name));\n    }, [name, onChange, options, push, values]);\n\n    const handleSelectNone = useCallback(() => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        checkedValues.forEach(() => remove(0));\n\n        onChange(getIn(values, name));\n    }, [name, onChange, remove, values]);\n\n    const handleInputChange = useCallback(\n        (event: ChangeEvent<HTMLInputElement>) => {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const checkedValues: string[] = getIn(values, name) || [];\n            const { value, checked } = event.target;\n\n            if (checked) {\n                push(value);\n            } else {\n                remove(checkedValues.indexOf(value));\n            }\n\n            onChange(getIn(values, name));\n        },\n        [name, onChange, push, remove, values],\n    );\n\n    return (\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        <FormFieldContainer hasError={getIn(errors, name) && getIn(errors, name).length}>\n            {label}\n\n            {options.length > 1 && (\n                <MultiCheckboxControl\n                    onSelectedAll={handleSelectAll}\n                    onSelectedNone={handleSelectNone}\n                    testId={id}\n                    themeV2={themeV2}\n                />\n            )}\n\n            <DynamicInput\n                fieldType={DynamicFormFieldType.CHECKBOX}\n                id={id}\n                name={name}\n                onChange={handleInputChange}\n                options={options}\n                themeV2={themeV2}\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                value={getIn(values, name) || []}\n            />\n\n            <FormFieldError\n                // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n                errorId={`${id ?? name}-field-error-message`}\n                name={name}\n                testId={`${kebabCase(name)}-field-error-message`}\n            />\n        </FormFieldContainer>\n    );\n};\n\nconst CheckboxGroupFormField: FunctionComponent<CheckboxGroupFormFieldProps> = ({\n    id,\n    label,\n    name,\n    onChange,\n    options,\n    themeV2,\n}) => {\n    const renderField = useCallback(\n        (renderProps: FieldArrayRenderProps) => (\n            <MultiCheckboxFormField\n                id={id}\n                label={label}\n                name={name}\n                onChange={onChange}\n                options={options}\n                themeV2={themeV2}\n                {...pick(renderProps, ['form', 'pop', 'push', 'remove'])}\n            />\n        ),\n        [id, label, name, onChange, options, themeV2],\n    );\n\n    return <FieldArray name={name} render={renderField} />;\n};\n\nexport default memo(CheckboxGroupFormField);\n","import { type FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { type FieldProps } from 'formik';\nimport { includes } from 'lodash';\nimport React, { type FunctionComponent, memo, type ReactNode, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField } from '../FormField';\nimport { Label } from '../Label';\n\nimport CheckboxGroupFormField from './CheckboxGroupFormField';\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\n\nexport interface DynamicFormFieldOption {\n    code: string;\n    name: string;\n}\n\nexport interface DynamicFormFieldProps {\n    field: FormFieldType;\n    inputId?: string;\n    extraClass?: string;\n    autocomplete?: string;\n    parentFieldName?: string;\n    placeholder?: string;\n    label?: ReactNode;\n    isFloatingLabelEnabled?: boolean;\n    themeV2?: boolean;\n    onChange?(value: string | string[]): void;\n}\n\nconst DynamicFormField: FunctionComponent<DynamicFormFieldProps> = ({\n    field: {\n        fieldType,\n        type,\n        secret,\n        name,\n        label: fieldLabel,\n        required,\n        options,\n        max,\n        min,\n        maxLength,\n    },\n    parentFieldName,\n    onChange,\n    placeholder,\n    inputId,\n    autocomplete,\n    label,\n    extraClass,\n    isFloatingLabelEnabled,\n    themeV2 = false,\n}) => {\n    const fieldInputId = inputId || name;\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\n    const isFloatingLabelSupportedFieldType = Boolean(\n        isFloatingLabelEnabled &&\n            (includes(['text', 'password', 'dropdown', 'date', 'multiline'], fieldType) ||\n                !fieldType),\n    );\n    const labelComponent = useMemo(() => {\n        let labelClassName = '';\n\n        if (themeV2) {\n            if (isFloatingLabelSupportedFieldType) {\n                labelClassName = 'floating-form-field-label';\n            } else {\n                labelClassName = 'body-medium';\n            }\n        }\n\n        return (\n            <Label\n                additionalClassName={labelClassName}\n                htmlFor={fieldInputId}\n                id={`${fieldInputId}-label`}\n                isFloatingLabelEnabled={isFloatingLabelSupportedFieldType}\n            >\n                {label || fieldLabel}\n                {!required && (\n                    <>\n                        {' '}\n                        <small className=\"optimizedCheckout-contentSecondary\">\n                            <TranslatedString id=\"common.optional_text\" />\n                        </small>\n                    </>\n                )}\n            </Label>\n        );\n    }, [themeV2, fieldInputId, isFloatingLabelSupportedFieldType, label, fieldLabel, required]);\n\n    const dynamicFormFieldType = useMemo((): DynamicFormFieldType => {\n        if (fieldType === 'text') {\n            if (type === 'integer') {\n                return DynamicFormFieldType.NUMBER;\n            }\n\n            if (includes(name, 'phone') || includes(name, 'tel')) {\n                return DynamicFormFieldType.TELEPHONE;\n            }\n\n            return secret ? DynamicFormFieldType.PASSWORD : DynamicFormFieldType.TEXT;\n        }\n\n        return fieldType as DynamicFormFieldType;\n    }, [fieldType, type, secret, name]);\n\n    const renderInput = useCallback(\n        ({ field }: FieldProps<string>) => (\n            <DynamicInput\n                {...field}\n                aria-labelledby={`${fieldInputId}-label ${fieldInputId}-field-error-message`}\n                autoComplete={autocomplete}\n                fieldType={dynamicFormFieldType}\n                id={fieldInputId}\n                isFloatingLabelEnabled={isFloatingLabelSupportedFieldType}\n                max={max}\n                maxLength={maxLength || undefined}\n                min={min}\n                options={options && options.items}\n                placeholder={placeholder || (options && options.helperLabel)}\n                rows={options?.rows}\n                themeV2={themeV2}\n            />\n        ),\n        [\n            fieldInputId,\n            autocomplete,\n            dynamicFormFieldType,\n            isFloatingLabelSupportedFieldType,\n            max,\n            maxLength,\n            min,\n            options,\n            placeholder,\n            themeV2,\n        ],\n    );\n\n    return (\n        <div\n            className={classNames(\n                'dynamic-form-field',\n                { 'floating-form-field': isFloatingLabelSupportedFieldType },\n                extraClass,\n            )}\n        >\n            {fieldType === DynamicFormFieldType.CHECKBOX ? (\n                <CheckboxGroupFormField\n                    id={fieldInputId}\n                    label={labelComponent}\n                    name={fieldName}\n                    onChange={onChange}\n                    options={(options && options.items) || []}\n                    themeV2={themeV2}\n                />\n            ) : (\n                <FormField\n                    id={fieldInputId}\n                    input={renderInput}\n                    isFloatingLabelEnabled={isFloatingLabelSupportedFieldType}\n                    label={labelComponent}\n                    name={fieldName}\n                    onChange={onChange}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default memo(DynamicFormField);\n","import { type FormField } from '@bigcommerce/checkout-sdk';\n\nimport { DynamicFormFieldType } from '@bigcommerce/checkout/ui';\n\nexport enum BraintreeAchFieldType {\n    BusinessName = 'businessName',\n    AccountType = 'accountType',\n    AccountNumber = 'accountNumber',\n    RoutingNumber = 'routingNumber',\n    OwnershipType = 'ownershipType',\n    FirstName = 'firstName',\n    LastName = 'lastName',\n}\n\nexport enum OwnershipTypes {\n    Personal = 'Personal',\n    Business = 'Business',\n}\n\nexport enum AccountTypes {\n    Savings = 'Savings',\n    Checking = 'Checking',\n}\n\nconst accountTypeOptions = [\n    {\n        value: AccountTypes.Savings,\n        label: AccountTypes.Savings,\n    },\n    {\n        value: AccountTypes.Checking,\n        label: AccountTypes.Checking,\n    },\n];\n\nexport const ownershipTypeOptions = [\n    {\n        value: OwnershipTypes.Personal,\n        label: OwnershipTypes.Personal,\n    },\n    {\n        value: OwnershipTypes.Business,\n        label: OwnershipTypes.Business,\n    },\n];\n\nexport const defaultBraintreeAchFormFields: FormField[] = [\n    {\n        name: BraintreeAchFieldType.AccountType,\n        custom: false,\n        id: BraintreeAchFieldType.AccountType,\n        label: 'Account Type',\n        required: true,\n        fieldType: DynamicFormFieldType.DROPDOWM,\n        options: {\n            items: accountTypeOptions,\n        },\n    },\n    {\n        name: BraintreeAchFieldType.AccountNumber,\n        custom: false,\n        id: BraintreeAchFieldType.AccountNumber,\n        label: 'Account Number',\n        required: true,\n        max: 9,\n        min: 8,\n    },\n    {\n        name: BraintreeAchFieldType.RoutingNumber,\n        custom: false,\n        id: BraintreeAchFieldType.RoutingNumber,\n        label: 'Routing Number',\n        required: true,\n    },\n    {\n        name: BraintreeAchFieldType.OwnershipType,\n        custom: false,\n        id: BraintreeAchFieldType.OwnershipType,\n        label: 'Ownership Type',\n        required: true,\n        fieldType: DynamicFormFieldType.DROPDOWM,\n        options: {\n            items: ownershipTypeOptions,\n        },\n    },\n];\n\nexport const personalBraintreeAchFormFields: FormField[] = [\n    ...defaultBraintreeAchFormFields,\n    {\n        name: BraintreeAchFieldType.FirstName,\n        custom: false,\n        id: BraintreeAchFieldType.FirstName,\n        label: 'First Name',\n        required: true,\n    },\n    {\n        name: BraintreeAchFieldType.LastName,\n        custom: false,\n        id: BraintreeAchFieldType.LastName,\n        label: 'Last Name',\n        required: true,\n    },\n];\n\nexport const businessBraintreeAchFormFields: FormField[] = [\n    ...defaultBraintreeAchFormFields,\n    {\n        name: BraintreeAchFieldType.BusinessName,\n        custom: false,\n        id: BraintreeAchFieldType.BusinessName,\n        label: 'Business Name',\n        required: true,\n    },\n];\n","import { type AchInstrument, type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find } from 'lodash';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { isAchInstrument } from '@bigcommerce/checkout/instrument-utils';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nconst useBraintreeAchInstruments = (method: PaymentMethod) => {\n    const [currentInstrument, setCurrentInstrument] = useState<AchInstrument | undefined>();\n\n    const { checkoutState } = useCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const { paymentForm } = usePaymentFormContext();\n    const { setFieldValue } = paymentForm;\n\n    const accountInstruments = useMemo(() => instruments.filter(isAchInstrument), [instruments]);\n    const isInstrumentFeatureAvailable =\n        !customer?.isGuest && Boolean(method.config.isVaultingEnabled);\n    const shouldShowInstrumentFieldset =\n        isInstrumentFeatureAvailable && accountInstruments.length > 0;\n    const shouldCreateNewInstrument = shouldShowInstrumentFieldset && !currentInstrument;\n    const shouldConfirmInstrument =\n        shouldShowInstrumentFieldset &&\n        !!currentInstrument &&\n        !currentInstrument.trustedShippingAddress;\n\n    const getDefaultInstrument = useCallback((): AchInstrument | undefined => {\n        if (!accountInstruments.length) {\n            return;\n        }\n\n        const defaultAccountInstrument = accountInstruments.filter(\n            ({ defaultInstrument }) => defaultInstrument,\n        );\n\n        return defaultAccountInstrument[0] || accountInstruments[0];\n    }, [accountInstruments]);\n\n    useEffect(() => {\n        setCurrentInstrument(isInstrumentFeatureAvailable ? getDefaultInstrument() : undefined);\n    }, [isInstrumentFeatureAvailable, getDefaultInstrument]);\n\n    useEffect(() => {\n        if (!shouldShowInstrumentFieldset) {\n            setFieldValue('instrumentId', '');\n        }\n    }, [setFieldValue, shouldShowInstrumentFieldset]);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setCurrentInstrument(find(accountInstruments, { bigpayToken: id }));\n            setFieldValue('instrumentId', id);\n            setFieldValue('shouldSetAsDefaultInstrument', false);\n        },\n        [accountInstruments, setFieldValue],\n    );\n\n    const handleUseNewInstrument = useCallback(() => {\n        setCurrentInstrument(undefined);\n        setFieldValue('instrumentId', '');\n        setFieldValue('shouldSaveInstrument', false);\n        setFieldValue('shouldSetAsDefaultInstrument', false);\n    }, [setFieldValue]);\n\n    return {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n        shouldConfirmInstrument,\n    };\n};\n\nexport default useBraintreeAchInstruments;\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { useCallback } from 'react';\nimport { object, string, type StringSchema } from 'yup';\n\nimport { useLocale } from '@bigcommerce/checkout/locale';\nimport {\n    type PaymentFormValues,\n    usePaymentFormContext,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport {\n    BraintreeAchFieldType,\n    businessBraintreeAchFormFields,\n    OwnershipTypes,\n    personalBraintreeAchFormFields,\n} from '../constants';\n\nconst useBraintreeAchValidation = (method: PaymentMethod) => {\n    const { paymentForm } = usePaymentFormContext();\n    const { language } = useLocale();\n\n    const getValidationSchema = () => {\n        const ownershipType = paymentForm.getFieldValue('ownershipType');\n        const formFields =\n            ownershipType === OwnershipTypes.Business\n                ? businessBraintreeAchFormFields\n                : personalBraintreeAchFormFields;\n\n        const requiredFieldErrorTranslationIds: { [fieldName: string]: string } = {\n            [BraintreeAchFieldType.FirstName]: 'address.first_name',\n            [BraintreeAchFieldType.LastName]: 'address.last_name',\n            [BraintreeAchFieldType.AccountNumber]: 'payment.errors.account_number',\n            [BraintreeAchFieldType.RoutingNumber]: 'payment.errors.routing_number',\n            [BraintreeAchFieldType.BusinessName]: 'payment.errors.business_name',\n        };\n\n        return object(\n            formFields.reduce(\n                (schema, { id, required }) => {\n                    if (required) {\n                        if (requiredFieldErrorTranslationIds[id]) {\n                            schema[id] = string().required(\n                                language.translate(\n                                    `${requiredFieldErrorTranslationIds[id]}_required_error`,\n                                ),\n                            );\n\n                            if (id === BraintreeAchFieldType.AccountNumber) {\n                                schema[id] = schema[id].matches(\n                                    /^\\d+$/,\n                                    language.translate('payment.errors.only_numbers_error', {\n                                        label: language.translate('payment.account_number_label'),\n                                    }),\n                                );\n                            }\n\n                            if (id === BraintreeAchFieldType.RoutingNumber) {\n                                schema[id] = schema[id]\n                                    .matches(\n                                        /^\\d+$/,\n                                        language.translate('payment.errors.only_numbers_error', {\n                                            label: language.translate(\n                                                'payment.account_routing_label',\n                                            ),\n                                        }),\n                                    )\n                                    .min(\n                                        8,\n                                        language.translate('customer.min_error', {\n                                            label: language.translate(\n                                                'payment.account_routing_label',\n                                            ),\n                                            min: 8,\n                                        }),\n                                    )\n                                    .max(\n                                        9,\n                                        language.translate('customer.max_error', {\n                                            label: language.translate(\n                                                'payment.account_routing_label',\n                                            ),\n                                            max: 9,\n                                        }),\n                                    );\n                            }\n                        }\n                    }\n\n                    return schema;\n                },\n                // eslint-disable-next-line @typescript-eslint/prefer-reduce-type-parameter\n                {} as { [key: string]: StringSchema },\n            ),\n        );\n    };\n\n    const validateBraintreeAchForm = useCallback(\n        async (braintreeAchFormValues: PaymentFormValues): Promise<boolean> => {\n            const {\n                accountNumber,\n                businessName,\n                routingNumber,\n                ownershipType,\n                firstName,\n                lastName,\n            } = braintreeAchFormValues;\n\n            const validationSchema = getValidationSchema();\n\n            paymentForm.setValidationSchema(method, validationSchema);\n\n            const [\n                isValidAccountNumber,\n                isValidRoutingNumber,\n                isValidFirstName,\n                isValidLastName,\n                isValidBusinessName,\n            ] = await Promise.all([\n                await validationSchema.fields.accountNumber?.isValid(accountNumber),\n                await validationSchema.fields.routingNumber?.isValid(routingNumber),\n                await validationSchema.fields.firstName?.isValid(firstName),\n                await validationSchema.fields.lastName?.isValid(lastName),\n                await validationSchema.fields.businessName?.isValid(businessName),\n            ]);\n\n            const isValidDepositoryName =\n                ownershipType === OwnershipTypes.Business\n                    ? isValidBusinessName\n                    : isValidFirstName && isValidLastName;\n\n            return isValidRoutingNumber && isValidAccountNumber && isValidDepositoryName;\n        },\n        [getValidationSchema],\n    );\n\n    const resetFormValidation = useCallback(() => {\n        paymentForm.setValidationSchema(method, null);\n    }, [paymentForm, method]);\n\n    return {\n        validateBraintreeAchForm,\n        resetFormValidation,\n    };\n};\n\nexport default useBraintreeAchValidation;\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, useCallback } from 'react';\n\nimport { useLocale } from '@bigcommerce/checkout/locale';\nimport { usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { DynamicFormField } from '@bigcommerce/checkout/ui';\n\nimport {\n    BraintreeAchFieldType,\n    businessBraintreeAchFormFields,\n    OwnershipTypes,\n    personalBraintreeAchFormFields,\n} from '../constants';\n\nconst isBraintreeAchFormFieldName = (fieldName: string): fieldName is BraintreeAchFieldType => {\n    return Object.values(BraintreeAchFieldType).includes(fieldName as BraintreeAchFieldType);\n};\n\nconst getTranslatedLabelByFieldName = (fieldName: string, language: LanguageService) => {\n    const braintreeAchFormLabelsMap = {\n        firstName: language.translate('address.first_name_label'),\n        lastName: language.translate('address.last_name_label'),\n        accountNumber: language.translate('payment.account_number_label'),\n        routingNumber: language.translate('payment.account_routing_label'),\n        businessName: language.translate('payment.business_name_label'),\n        ownershipType: language.translate('payment.ownership_type_label'),\n        accountType: language.translate('payment.account_type_label'),\n    };\n\n    return isBraintreeAchFormFieldName(fieldName)\n        ? braintreeAchFormLabelsMap[fieldName]\n        : fieldName;\n};\n\nconst BraintreeAchFormFields: FunctionComponent = () => {\n    const { language } = useLocale();\n    const { paymentForm } = usePaymentFormContext();\n    const { getFieldValue, setFieldValue } = paymentForm;\n\n    const ownershipTypeValue = getFieldValue(BraintreeAchFieldType.OwnershipType);\n    const fieldValues =\n        ownershipTypeValue === OwnershipTypes.Business\n            ? businessBraintreeAchFormFields\n            : personalBraintreeAchFormFields;\n\n    const handleChange = useCallback(\n        (fieldId: string) => (value: string) => {\n            setFieldValue(fieldId, value);\n        },\n        [setFieldValue],\n    );\n\n    return (\n        <>\n            {fieldValues.map((field) => (\n                <DynamicFormField\n                    extraClass={`dynamic-form-field--${field.id}`}\n                    field={field}\n                    key={field.id}\n                    label={getTranslatedLabelByFieldName(field.name, language)}\n                    onChange={handleChange(field.id)}\n                />\n            ))}\n        </>\n    );\n};\n\nexport default BraintreeAchFormFields;\n","import React, { type FunctionComponent, useEffect } from 'react';\n\nimport { useLocale } from '@bigcommerce/checkout/locale';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { CheckboxFormField } from '@bigcommerce/checkout/ui';\n\nimport { OwnershipTypes } from '../constants';\n\nexport interface BraintreeAchMandateTextProps {\n    isInstrumentFeatureAvailable?: boolean;\n    updateMandateText: (mandateText: string) => void;\n}\n\nconst BraintreeAchMandateText: FunctionComponent<BraintreeAchMandateTextProps> = ({\n    isInstrumentFeatureAvailable,\n    updateMandateText,\n}) => {\n    const { checkoutState } = useCheckout();\n    const { paymentForm } = usePaymentFormContext();\n    const { language } = useLocale();\n\n    const {\n        businessName,\n        accountType,\n        accountNumber,\n        routingNumber,\n        ownershipType,\n        firstName,\n        lastName,\n    } = paymentForm.getFormValues();\n\n    const fullName = `${String(firstName)} ${String(lastName)}`;\n\n    const depositoryName = ownershipType === OwnershipTypes.Business ? businessName : fullName;\n    const outstandingBalance = checkoutState.data.getCheckout()?.outstandingBalance;\n    const storeName = checkoutState.data.getConfig()?.storeProfile.storeName;\n    const symbol = checkoutState.data.getCart()?.currency.symbol;\n\n    const mandateTextTranslationKey = isInstrumentFeatureAvailable\n        ? 'payment.braintreeach_vaulting_mandate_text'\n        : 'payment.braintreeach_mandate_text';\n\n    const currentDate = new Date(Date.now()).toJSON().slice(0, 10); // yyyy-mm-dd\n    const formattedDate = currentDate.split('-').reverse().join('.'); // dd.mm.yyyy\n\n    const mandateTextTranslationProps = {\n        accountType: String(accountType).toLowerCase(),\n        accountNumber: String(accountNumber),\n        currentDate: formattedDate,\n        depositoryName: String(depositoryName),\n        routingNumber: String(routingNumber),\n        outstandingBalance: `${symbol || ''}${outstandingBalance || ''}`,\n        storeName: String(storeName),\n    };\n\n    const mandateText = language.translate(mandateTextTranslationKey, mandateTextTranslationProps);\n\n    useEffect(() => {\n        updateMandateText(mandateText);\n    }, [mandateText, updateMandateText]);\n\n    const handleChange = (value: boolean) => {\n        paymentForm.setFieldValue('orderConsent', value);\n    };\n\n    return (\n        <div className=\"mandate-text\" data-test=\"mandate-text\">\n            <CheckboxFormField\n                labelContent={mandateText}\n                name=\"orderConsent\"\n                onChange={handleChange}\n            />\n        </div>\n    );\n};\n\nexport default BraintreeAchMandateText;\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, useEffect, useState } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { AccountTypes, OwnershipTypes } from '../constants';\nimport useBraintreeAchInstruments from '../hooks/useBraintreeAchInstruments';\nimport useBraintreeAchValidation from '../hooks/useBraintreeAchValidation';\n\nimport BraintreeAchFormFields from './BraintreeAchFormFields';\nimport BraintreeAchMandateText from './BraintreeAchMandateText';\n\nexport interface BraintreeAchPaymentFormProps {\n    method: PaymentMethod;\n    updateMandateText: (mandateText: string) => void;\n}\n\nconst BraintreeAchPaymentForm: FunctionComponent<BraintreeAchPaymentFormProps> = ({\n    method,\n    updateMandateText,\n}) => {\n    const [isValidForm, setIsValidForm] = useState(false);\n    const { checkoutState } = useCheckout();\n    const { paymentForm } = usePaymentFormContext();\n    const { disableSubmit, getFieldValue, getFormValues, setFieldValue } = paymentForm;\n    const {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n        shouldConfirmInstrument,\n    } = useBraintreeAchInstruments(method);\n    const { validateBraintreeAchForm, resetFormValidation } = useBraintreeAchValidation(method);\n\n    const resetFormValues = () => {\n        const { firstName, lastName } = checkoutState.data.getBillingAddress() || {};\n\n        const defaultFormValues = {\n            ownershipType: OwnershipTypes.Personal,\n            accountType: AccountTypes.Savings,\n            accountNumber: '',\n            routingNumber: '',\n            businessName: '',\n            firstName: firstName || '',\n            lastName: lastName || '',\n            shouldSaveInstrument: false,\n            shouldSetAsDefaultInstrument: false,\n            instrumentId: currentInstrument?.bigpayToken || '',\n            orderConsent: false,\n        };\n\n        for (const [key, value] of Object.entries(defaultFormValues)) {\n            setFieldValue(key, value);\n        }\n    };\n\n    useEffect(() => {\n        resetFormValues();\n    }, [currentInstrument?.bigpayToken]);\n\n    const shouldShowForm =\n        !shouldShowInstrumentFieldset || shouldCreateNewInstrument || shouldConfirmInstrument;\n    const shouldShowMandateTextCheckbox = shouldShowForm && isValidForm && !shouldConfirmInstrument;\n\n    useEffect(() => {\n        if (shouldShowForm) {\n            const validate = async () => {\n                const braintreeAchFormValues = getFormValues();\n                const isValid = await validateBraintreeAchForm(braintreeAchFormValues);\n\n                if (!isValid && getFieldValue('orderConsent')) {\n                    setFieldValue('orderConsent', false);\n                }\n\n                setIsValidForm(isValid);\n            };\n\n            void validate();\n        } else {\n            resetFormValidation();\n        }\n    }, [\n        getFormValues,\n        setFieldValue,\n        setIsValidForm,\n        shouldShowForm,\n        validateBraintreeAchForm,\n        resetFormValidation,\n    ]);\n\n    useEffect(() => {\n        const mandateTextConfirmationCheckboxValue = getFieldValue('orderConsent');\n\n        const inValidForInstrumentConfirmation = shouldConfirmInstrument && !isValidForm;\n        const inValidForDefaultTransactions =\n            shouldShowMandateTextCheckbox && !mandateTextConfirmationCheckboxValue;\n\n        const shouldDisableSubmit = shouldShowForm\n            ? inValidForInstrumentConfirmation || inValidForDefaultTransactions\n            : false;\n\n        disableSubmit(method, shouldDisableSubmit);\n    }, [disableSubmit, getFieldValue, isValidForm, method, shouldShowMandateTextCheckbox]);\n\n    return (\n        <div className=\"checkout-ach-form\" data-test=\"checkout-ach-form\">\n            {shouldShowInstrumentFieldset && (\n                <div className=\"checkout-ach-form__instrument\">\n                    <AccountInstrumentFieldset\n                        instruments={accountInstruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewInstrument}\n                        selectedInstrument={currentInstrument}\n                    />\n                </div>\n            )}\n\n            {shouldConfirmInstrument && (\n                <p>\n                    <strong>\n                        <TranslatedString id=\"payment.bank_account_instrument_trusted_shipping_address_title_text\" />\n                    </strong>\n\n                    <br />\n\n                    <TranslatedString id=\"payment.bank_account_instrument_trusted_shipping_address_text\" />\n                </p>\n            )}\n\n            {shouldShowForm && <BraintreeAchFormFields />}\n\n            {isInstrumentFeatureAvailable && (\n                <StoreInstrumentFieldset\n                    instrumentId={currentInstrument?.bigpayToken}\n                    instruments={accountInstruments}\n                    isAccountInstrument\n                />\n            )}\n\n            {shouldShowMandateTextCheckbox && (\n                <BraintreeAchMandateText\n                    isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n                    updateMandateText={updateMandateText}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default BraintreeAchPaymentForm;\n","import { createBraintreeAchPaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/braintree';\nimport React, { type FunctionComponent, useEffect, useRef } from 'react';\n\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport BraintreeAchPaymentForm from './components/BraintreeAchPaymentForm';\n\nconst BraintreeAchPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n    onUnhandledError,\n    paymentForm,\n}) => {\n    const currentMandateTextRef = useRef('');\n    const updateMandateText = (currentMandateText: string) => {\n        currentMandateTextRef.current = currentMandateText;\n    };\n\n    useEffect(() => {\n        const initializePaymentOrThrow = async () => {\n            try {\n                await checkoutService.initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                    integrations: [createBraintreeAchPaymentStrategy],\n                    braintreeach: {\n                        getMandateText: () => currentMandateTextRef.current,\n                    },\n                });\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        void initializePaymentOrThrow();\n\n        return () => {\n            const deinitializePaymentOrThrow = async () => {\n                try {\n                    await checkoutService.deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            void deinitializePaymentOrThrow();\n        };\n    }, [checkoutService, method.gateway, method.id, onUnhandledError]);\n\n    useEffect(() => {\n        const loadInstrumentsOrThrow = async () => {\n            try {\n                await checkoutService.loadInstruments();\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        const { isGuest } = checkoutState.data.getCustomer() || {};\n\n        const shouldLoadInstruments = !isGuest && method.config.isVaultingEnabled;\n\n        if (shouldLoadInstruments) {\n            void loadInstrumentsOrThrow();\n        }\n    }, []);\n\n    const isLoading =\n        checkoutState.statuses.isLoadingInstruments() ||\n        checkoutState.statuses.isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <BraintreeAchPaymentForm\n                                method={method}\n                                updateMandateText={updateMandateText}\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BraintreeAchPaymentMethod,\n    [{ id: 'braintreeach' }],\n);\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { useState } from 'react';\n\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { isPayPalFastlaneCustomer } from '@bigcommerce/checkout/paypal-fastlane-integration';\n\nexport const useBraintreeFastlaneInstruments = () => {\n    const [selectedInstrument, setSelectedInstrument] = useState<CardInstrument>();\n\n    const { getPaymentProviderCustomer } = useCheckout().checkoutState.data;\n    const paymentProviderCustomer = getPaymentProviderCustomer();\n    const paypalFastlaneCustomer = isPayPalFastlaneCustomer(paymentProviderCustomer)\n        ? paymentProviderCustomer\n        : {};\n\n    const { paymentForm } = usePaymentFormContext();\n\n    const handleSelectInstrument = (instrument: CardInstrument): void => {\n        setSelectedInstrument(instrument);\n        paymentForm.setFieldValue('instrumentId', instrument.bigpayToken);\n    };\n\n    return {\n        instruments: paypalFastlaneCustomer.instruments || [],\n        handleSelectInstrument,\n        selectedInstrument,\n    };\n};\n","import React, { type FunctionComponent, useEffect } from 'react';\n\nimport { type BraintreeFastlaneComponentRef } from '../BraintreeFastlanePaymentMethod';\n\nimport './BraintreeFastlaneCreditCardForm.scss';\n\ninterface BraintreeFastlaneCreditCardFormProps {\n    renderPayPalCardComponent?: BraintreeFastlaneComponentRef['renderPayPalCardComponent'];\n}\n\nconst BraintreeFastlaneCreditCardForm: FunctionComponent<BraintreeFastlaneCreditCardFormProps> = ({\n    renderPayPalCardComponent,\n}) => {\n    useEffect(() => {\n        if (typeof renderPayPalCardComponent === 'function') {\n            renderPayPalCardComponent('#braintree-fastlane-cc-form-container');\n        }\n    }, [renderPayPalCardComponent]);\n\n    return (\n        <div\n            className=\"braintree-fastlane-cc-form-container\"\n            data-test=\"braintree-fastlane-cc-form-container\"\n            id=\"braintree-fastlane-cc-form-container\"\n        />\n    );\n};\n\nexport default BraintreeFastlaneCreditCardForm;\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { PoweredByPayPalFastlaneLabel } from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { Button, ButtonSize, ButtonVariant, CreditCardIcon } from '@bigcommerce/checkout/ui';\n\nimport { type BraintreeFastlaneComponentRef } from '../BraintreeFastlanePaymentMethod';\n\nimport './BraintreeFastlaneInstrumentsForm.scss';\n\nfunction mapFromInstrumentCardType(type: string): string {\n    switch (type.toLowerCase()) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n            return 'diners-club';\n\n        case 'master_card':\n            return 'mastercard';\n\n        default:\n            return type;\n    }\n}\n\ninterface BraintreeFastlaneInstrumentsFormProps {\n    onChange: BraintreeFastlaneComponentRef['showPayPalCardSelector'];\n    selectedInstrument: CardInstrument;\n    handleSelectInstrument(instrument: CardInstrument): void;\n}\n\nconst BraintreeFastlaneInstrumentsForm: FunctionComponent<\n    BraintreeFastlaneInstrumentsFormProps\n> = ({ onChange, handleSelectInstrument, selectedInstrument }) => {\n    const cardType = mapFromInstrumentCardType(selectedInstrument.brand).toLowerCase();\n\n    const handleChange = async () => {\n        if (typeof onChange === 'function') {\n            const result = await onChange();\n\n            if (result) {\n                handleSelectInstrument(result);\n            }\n        }\n    };\n\n    return (\n        <div\n            className=\"braintree-fastlane-instrument\"\n            data-test=\"braintree-fastlane-instrument-form\"\n        >\n            <div>\n                <div className=\"braintree-fastlane-instrument-details\">\n                    <CreditCardIcon cardType={cardType} />\n\n                    <div\n                        className=\"instrumentSelect-card\"\n                        data-test=\"braintree-fastlane-instrument-last4\"\n                    >\n                        {/* &#9679; is a ● */}\n                        <span>&#9679;&#9679;&#9679;&#9679; {selectedInstrument.last4}</span>\n                    </div>\n                </div>\n                <div className=\"braintree-fastlane-instrument-branding\">\n                    <PoweredByPayPalFastlaneLabel />\n                </div>\n            </div>\n\n            <div className=\"braintree-fastlane-instrument-change-action\">\n                <Button\n                    onClick={handleChange}\n                    size={ButtonSize.Tiny}\n                    testId=\"braintree-fastlane-instrument-change\"\n                    variant={ButtonVariant.Secondary}\n                >\n                    <TranslatedString id=\"common.change_action\" />\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nexport default BraintreeFastlaneInstrumentsForm;\n","import React, { type FunctionComponent, useEffect } from 'react';\n\nimport { type BraintreeFastlaneComponentRef } from '../BraintreeFastlanePaymentMethod';\nimport { useBraintreeFastlaneInstruments } from '../hooks/useBraintreeFastlaneInstruments';\n\nimport BraintreFastlaneCreditCardForm from './BraintreeFastlaneCreditCardForm';\nimport BraintreeFastlaneInstrumentsForm from './BraintreeFastlaneInstrumentsForm';\n\ninterface BraintreeFastlaneFormProps {\n    renderPayPalCardComponent?: BraintreeFastlaneComponentRef['renderPayPalCardComponent'];\n    showPayPalCardSelector?: BraintreeFastlaneComponentRef['showPayPalCardSelector'];\n}\n\nconst BraintreeFastlaneForm: FunctionComponent<BraintreeFastlaneFormProps> = ({\n    renderPayPalCardComponent,\n    showPayPalCardSelector,\n}) => {\n    const { instruments, handleSelectInstrument, selectedInstrument } =\n        useBraintreeFastlaneInstruments();\n\n    const shouldShowInstrumentsForm = instruments.length > 0;\n\n    useEffect(() => {\n        if (!selectedInstrument && instruments.length > 0) {\n            handleSelectInstrument(instruments[0]);\n        }\n    }, [instruments, selectedInstrument]);\n\n    return (\n        <div className=\"paymentMethod paymentMethod--creditCard\" id=\"braintree-fastlane\">\n            {shouldShowInstrumentsForm && (\n                <BraintreeFastlaneInstrumentsForm\n                    handleSelectInstrument={handleSelectInstrument}\n                    onChange={showPayPalCardSelector}\n                    selectedInstrument={selectedInstrument || instruments[0]}\n                />\n            )}\n\n            {!shouldShowInstrumentsForm && (\n                <BraintreFastlaneCreditCardForm\n                    renderPayPalCardComponent={renderPayPalCardComponent}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default BraintreeFastlaneForm;\n","import BraintreeFastlanePaymentMethod from './BraintreeFastlanePaymentMethod';\n\nexport default BraintreeFastlanePaymentMethod;\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { createBraintreeFastlanePaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/braintree';\nimport React, { type FunctionComponent, useEffect, useRef } from 'react';\n\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport BraintreeFastlaneForm from './components/BraintreeFastlaneForm';\n\nimport './BraintreeFastlanePaymentMethod.scss';\n\nexport interface BraintreeFastlaneComponentRef {\n    renderPayPalCardComponent?: (container: string) => void;\n    showPayPalCardSelector?: () => Promise<CardInstrument | undefined>;\n}\n\nconst BraintreeFastlanePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n    onUnhandledError,\n    paymentForm,\n}) => {\n    const paypalFastlaneComponentRef = useRef<BraintreeFastlaneComponentRef>({});\n\n    const { isLoadingPaymentMethod, isInitializingPayment } = checkoutState.statuses;\n\n    const initializePaymentOrThrow = async () => {\n        try {\n            await checkoutService.initializePayment({\n                methodId: method.id,\n                integrations: [createBraintreeFastlanePaymentStrategy],\n                braintreefastlane: {\n                    onInit: (renderPayPalCardComponent) => {\n                        paypalFastlaneComponentRef.current.renderPayPalCardComponent =\n                            renderPayPalCardComponent;\n                    },\n                    onChange: (showPayPalCardSelector) => {\n                        paypalFastlaneComponentRef.current.showPayPalCardSelector =\n                            showPayPalCardSelector;\n                    },\n                    onError: (error: Error) => {\n                        onUnhandledError(error);\n                    },\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePaymentOrThrow = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePaymentOrThrow();\n\n        return () => {\n            void deinitializePaymentOrThrow();\n        };\n    }, []);\n\n    const isLoading = isInitializingPayment() || isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <BraintreeFastlaneForm\n                                renderPayPalCardComponent={\n                                    paypalFastlaneComponentRef?.current?.renderPayPalCardComponent\n                                }\n                                showPayPalCardSelector={\n                                    paypalFastlaneComponentRef.current?.showPayPalCardSelector\n                                }\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BraintreeFastlanePaymentMethod,\n    [{ id: 'braintreeacceleratedcheckout' }],\n);\n","import { createBraintreeLocalMethodsPaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/braintree';\nimport React, { type FunctionComponent, useEffect } from 'react';\n\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst BraintreeLocalPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    paymentForm,\n    language,\n    onUnhandledError,\n}) => {\n    const methodId = method.id;\n\n    const initializePayment = async () => {\n        try {\n            await checkoutService.initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n                integrations: [createBraintreeLocalMethodsPaymentStrategy],\n                braintreelocalmethods: {\n                    container: '#checkout-payment-continue',\n                    buttonText: language.translate('payment.continue_with_brand', {\n                        brandName: methodId,\n                    }),\n                    onRenderButton: () => {\n                        paymentForm.hidePaymentSubmitButton(method, true);\n                    },\n                    submitForm: () => {\n                        paymentForm.setSubmitted(true);\n                        paymentForm.submitForm();\n                    },\n                    onError: (error: Error) => {\n                        paymentForm.disableSubmit(method, true);\n                        onUnhandledError(error);\n                    },\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePayment = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePayment();\n\n        return () => {\n            void deinitializePayment();\n        };\n    }, []);\n\n    return <></>;\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BraintreeLocalPaymentMethod,\n    [{ gateway: 'braintreelocalmethods' }],\n);\n","import { type PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { createBraintreePaypalPaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/braintree';\nimport React, { type FunctionComponent, useCallback } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst BraintreePaypalPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    ...rest\n}) => {\n    const initializeBraintreePaypalPaymentMethod = useCallback(\n        (defaultOptions: PaymentInitializeOptions) => {\n            const { onUnhandledError, language, method, paymentForm } = rest;\n\n            return checkoutService.initializePayment({\n                ...defaultOptions,\n                integrations: [createBraintreePaypalPaymentStrategy],\n                braintree: {\n                    containerId: '#checkout-payment-continue',\n                    submitForm: () => {\n                        paymentForm.setSubmitted(true);\n                        paymentForm.submitForm();\n                    },\n                    onError: (error: Error) => {\n                        if (error.message === 'INSTRUMENT_DECLINED') {\n                            onUnhandledError?.(\n                                new Error(language.translate('payment.errors.instrument_declined')),\n                            );\n                        } else {\n                            onUnhandledError?.(error);\n                        }\n                    },\n                    onRenderButton: () => {\n                        paymentForm.hidePaymentSubmitButton(method, true);\n                    },\n                },\n            });\n        },\n        [rest, checkoutService],\n    );\n\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializeBraintreePaypalPaymentMethod}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BraintreePaypalPaymentMethod,\n    [{ id: 'braintreepaypal' }],\n);\n","import { type PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { createBraintreeVisaCheckoutPaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/braintree';\nimport React, { type FunctionComponent, useCallback } from 'react';\n\nimport {\n    type CheckoutButtonResolveId,\n    PaymentMethodId,\n    type PaymentMethodProps,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { WalletButtonPaymentMethodComponent } from '@bigcommerce/checkout/wallet-button-integration';\n\nconst VisaCheckoutPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    method,\n    onUnhandledError,\n    ...rest\n}) => {\n    const initializeVisaCheckoutPayment = useCallback(\n        (defaultOptions: PaymentInitializeOptions) => {\n            const reinitializePayment = async (options: PaymentInitializeOptions) => {\n                try {\n                    await checkoutService.deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n\n                    await checkoutService.initializePayment({\n                        ...options,\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                        integrations: [createBraintreeVisaCheckoutPaymentStrategy],\n                    });\n                } catch (error) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            const mergedOptions = {\n                ...defaultOptions,\n                integrations: [createBraintreeVisaCheckoutPaymentStrategy],\n                braintreevisacheckout: {\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n            };\n\n            return checkoutService.initializePayment(mergedOptions);\n        },\n        [checkoutService, method, onUnhandledError],\n    );\n\n    return (\n        <WalletButtonPaymentMethodComponent\n            {...rest}\n            buttonId=\"visaCheckoutWalletButton\"\n            deinitializePayment={checkoutService.deinitializePayment}\n            editButtonClassName=\"v-button\"\n            initializePayment={initializeVisaCheckoutPayment}\n            method={method}\n            shouldShowEditButton\n            signInButtonClassName=\"v-button\"\n            signOutCustomer={checkoutService.signOutCustomer}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, CheckoutButtonResolveId>(\n    VisaCheckoutPaymentMethod,\n    [{ id: PaymentMethodId.BraintreeVisaCheckout }],\n);\n","import React, { type FunctionComponent } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { createBraintreeVenmoPaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/braintree';\nimport { type PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\n\nconst BraintreeVenmoPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    language,\n    method,\n    paymentForm,\n}) => {\n    const initializeBraintreeVenmoPayment = async (options: PaymentInitializeOptions) => {\n        return checkoutService.initializePayment({\n            ...options,\n            integrations: [createBraintreeVenmoPaymentStrategy],\n        });\n    };\n\n    return (\n        <HostedPaymentComponent\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializeBraintreeVenmoPayment}\n            language={language}\n            method={method}\n            paymentForm={paymentForm}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BraintreeVenmoPaymentMethod,\n    [{ id: 'braintreevenmo' }],\n);\n","import { type Customer, type PaymentMethod, type StoreConfig } from '@bigcommerce/checkout-sdk';\n\nexport interface IsInstrumentFeatureAvailableState {\n    config: StoreConfig;\n    customer: Customer;\n    isUsingMultiShipping: boolean;\n    paymentMethod: PaymentMethod;\n}\n\nexport default function isInstrumentFeatureAvailable({\n    config,\n    customer,\n    isUsingMultiShipping,\n    paymentMethod,\n}: IsInstrumentFeatureAvailableState): boolean {\n    if (\n        !config.checkoutSettings.isCardVaultingEnabled ||\n        !paymentMethod.config.isVaultingEnabled ||\n        customer.isGuest ||\n        isUsingMultiShipping\n    ) {\n        return false;\n    }\n\n    return true;\n}\n","import { number } from 'card-validator';\n\nimport { type WalletButtonInitializationData } from './types';\n\ninterface WalletPaymentData {\n    accountMask: string;\n    cardType: string;\n    expiryMonth?: string;\n    expiryYear?: string;\n}\n\nconst formatAccountMask = (accountMask = '', padding = '****'): string =>\n    accountMask.includes('*') ? accountMask : `${padding} ${accountMask}`;\n\nconst isWalletButtonInitializationData = (\n    object: unknown,\n): object is WalletButtonInitializationData => {\n    if (typeof object === 'object' && object !== null) {\n        if (\n            'card_information' in object &&\n            typeof object.card_information === 'object' &&\n            object.card_information !== null &&\n            'number' in object.card_information &&\n            'type' in object.card_information\n        ) {\n            return true;\n        }\n\n        if (\n            'cardData' in object &&\n            typeof object.cardData === 'object' &&\n            object.cardData !== null &&\n            'accountMask' in object.cardData &&\n            'cardType' in object.cardData &&\n            'expMonth' in object.cardData &&\n            'expYear' in object.cardData\n        ) {\n            return true;\n        }\n\n        if ('accountNum' in object && 'accountMask' in object && 'expDate' in object) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\n// For some odd reason, `initializationData` is a schema-less object. So in\n// order to use it safely, we have to normalize it first.\nconst normalizeWalletPaymentData = (data: unknown): WalletPaymentData | undefined => {\n    if (isWalletButtonInitializationData(data)) {\n        if (data.card_information) {\n            return {\n                accountMask: formatAccountMask(data.card_information.number),\n                cardType: data.card_information.type,\n            };\n        }\n\n        if (data.cardData) {\n            return {\n                accountMask: formatAccountMask(data.cardData.accountMask),\n                cardType: data.cardData.cardType,\n                expiryMonth: data.cardData.expMonth,\n                expiryYear: data.cardData.expYear,\n            };\n        }\n\n        if (data.accountNum) {\n            const { card } = number(data.accountNum);\n\n            return {\n                accountMask: formatAccountMask(data.accountMask),\n                expiryMonth: data.expDate && data.expDate.substr(0, 2),\n                expiryYear: data.expDate && data.expDate.substr(2, 2),\n                cardType: card ? card.niceType : '',\n            };\n        }\n    }\n\n    return undefined;\n};\n\nexport default normalizeWalletPaymentData;\n","enum PaymentMethodType {\n    ApplePay = 'applepay',\n    Barclaycard = 'barclaycard',\n    CreditCard = 'credit-card',\n    GooglePay = 'googlepay',\n    PayWithGoogle = 'paywithgoogle',\n    Masterpass = 'masterpass',\n    MultiOption = 'multi-option',\n    Paypal = 'paypal',\n    PaypalCredit = 'paypal-credit',\n    PaypalVenmo = 'paypal-venmo',\n    VisaCheckout = 'visa-checkout',\n}\n\nexport default PaymentMethodType;\n","import { type LanguageService, type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { capitalize, get } from 'lodash';\n\nimport PaymentMethodId from './PaymentMethodId';\nimport PaymentMethodType from './PaymentMethodType';\n\n/**\n * Always return the translated name of a payment method unless it is a\n * multi-option payment method or it doesn't have any translation. It's possible\n * to translate the gateway name of multi-option methods, i.e.: AfterPay.\n * However, because the options provided by the gateway can vary a lot, i.e.:\n * \"Pay by Installment\", therefore it's not feasible to do the translation on\n * the UI level.\n */\nexport default function getPaymentMethodName(\n    language: LanguageService,\n): (method: PaymentMethod) => string {\n    return (method) => {\n        let name = getTranslatedPaymentMethodName(language)(method);\n\n        if (!name || method.method === PaymentMethodType.MultiOption) {\n            name = method.config.displayName;\n        }\n\n        if (!name) {\n            name = capitalize(\n                get(method, 'initializationData.paymentData.cardData.digital_wallet_type') ||\n                    method.method ||\n                    method.id,\n            );\n        }\n\n        return name;\n    };\n}\n\nexport function getTranslatedPaymentMethodName(\n    language: LanguageService,\n): (method: PaymentMethod) => string | undefined {\n    return (method) => {\n        const translations: { [key: string]: string } = {\n            [PaymentMethodId.Affirm]: language.translate('payment.affirm_name_text'),\n            [PaymentMethodId.Afterpay]: language.translate('payment.afterpay_name_text'),\n            [PaymentMethodId.AmazonPay]: language.translate('payment.amazon_name_text'),\n            [PaymentMethodId.Bolt]: language.translate('payment.bolt_name_text'),\n            [PaymentMethodId.Clearpay]: language.translate('payment.clearpay_name_text'),\n            [PaymentMethodType.GooglePay]: language.translate('payment.google_pay_name_text'),\n            [PaymentMethodId.Klarna]: language.translate('payment.klarna_name_text'),\n            [PaymentMethodType.Paypal]: language.translate('payment.paypal_name_text'),\n            [PaymentMethodType.PaypalCredit]: language.translate('payment.paypal_credit_name_text'),\n            [PaymentMethodType.VisaCheckout]: language.translate('payment.vco_name_text'),\n        };\n\n        return translations[method.id] || translations[method.method];\n    };\n}\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, useLocale } from '@bigcommerce/checkout/locale';\nimport { getPaymentMethodName } from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface SignOutLinkProps {\n    method: PaymentMethod;\n    onSignOut(): void;\n}\n\nconst SignOutLink: FunctionComponent<SignOutLinkProps> = ({ method, onSignOut }) => {\n    const { language } = useLocale();\n\n    return (\n        <div className=\"signout-link\">\n            <TranslatedString id=\"remote.sign_out_before_action\" />{' '}\n            {\n                // eslint-disable-next-line jsx-a11y/anchor-is-valid\n                <a href=\"#\" onClick={preventDefault(onSignOut)}>\n                    <TranslatedString\n                        data={{ providerName: getPaymentMethodName(language)(method) }}\n                        id=\"remote.sign_out_action\"\n                    />\n                </a>\n            }{' '}\n            <TranslatedString id=\"remote.sign_out_after_action\" />\n        </div>\n    );\n};\n\nexport default SignOutLink;\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { type ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { SignOutLink } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nexport interface PaymentViewProps {\n    accountMask?: string;\n    cardName?: string;\n    cardType?: string;\n    expiryMonth?: string;\n    expiryYear?: string;\n    shouldShowEditButton?: boolean;\n    editButtonClassName?: string;\n    editButtonLabel?: ReactNode;\n    buttonId: string;\n    method: PaymentMethod;\n    onSignOut: () => void;\n}\n\nconst PaymentView: React.FC<PaymentViewProps> = ({\n    accountMask,\n    cardName,\n    cardType,\n    expiryMonth,\n    expiryYear,\n    shouldShowEditButton,\n    editButtonClassName,\n    editButtonLabel,\n    buttonId,\n    method,\n    onSignOut,\n}) => {\n    return (\n        <>\n            {!!cardName && (\n                <p data-test=\"payment-method-wallet-card-name\">\n                    <strong>\n                        <TranslatedString id=\"payment.credit_card_name_label\" />:\n                    </strong>{' '}\n                    {cardName}\n                </p>\n            )}\n\n            {!!accountMask && !!cardType && (\n                <p data-test=\"payment-method-wallet-card-type\">\n                    <strong>{`${cardType}:`}</strong> {accountMask}\n                </p>\n            )}\n\n            {!!expiryMonth && !!expiryYear && (\n                <p data-test=\"payment-method-wallet-card-expiry\">\n                    <strong>\n                        <TranslatedString id=\"payment.credit_card_expiration_date_label\" />:\n                    </strong>{' '}\n                    {`${expiryMonth}/${expiryYear}`}\n                </p>\n            )}\n\n            {!!shouldShowEditButton && (\n                <p>\n                    {\n                        // eslint-disable-next-line jsx-a11y/anchor-is-valid\n                        <a\n                            className={editButtonClassName}\n                            href=\"#\"\n                            id={buttonId}\n                            onClick={preventDefault()}\n                        >\n                            {editButtonLabel || (\n                                <TranslatedString id=\"remote.select_different_card_action\" />\n                            )}\n                        </a>\n                    }\n                </p>\n            )}\n\n            <SignOutLink method={method} onSignOut={onSignOut} />\n        </>\n    );\n};\n\nexport default PaymentView;\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { type ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, useLocale } from '@bigcommerce/checkout/locale';\nimport { getPaymentMethodName } from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface SignInViewProps {\n    buttonId: string;\n    method: PaymentMethod;\n    signInButtonClassName?: string;\n    signInButtonLabel?: ReactNode;\n}\n\nconst SignInView: React.FC<SignInViewProps> = ({\n    buttonId,\n    method,\n    signInButtonClassName,\n    signInButtonLabel,\n}) => {\n    const { language } = useLocale();\n\n    return (\n        // eslint-disable-next-line jsx-a11y/anchor-is-valid\n        <a className={signInButtonClassName} href=\"#\" id={buttonId} onClick={preventDefault()}>\n            {signInButtonLabel || (\n                <TranslatedString\n                    data={{ providerName: getPaymentMethodName(language)(method) }}\n                    id=\"remote.sign_in_action\"\n                />\n            )}\n        </a>\n    );\n};\n\nexport default SignInView;\n","import {\n    type CheckoutSelectors,\n    type CustomerRequestOptions,\n    type PaymentInitializeOptions,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop, some } from 'lodash';\nimport React, { type ReactNode, useCallback, useEffect } from 'react';\n\nimport {\n    type PaymentFormService,\n    useCheckout,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport normalizeWalletPaymentData from './normalizeWalletPaymentData';\nimport PaymentView from './PaymentView';\nimport SignInView from './SignInView';\n\nexport interface WalletButtonPaymentMethodProps {\n    paymentForm: PaymentFormService;\n    buttonId: string;\n    editButtonClassName?: string;\n    editButtonLabel?: ReactNode;\n    isInitializing?: boolean;\n    method: PaymentMethod;\n    shouldShowEditButton?: boolean;\n    signInButtonClassName?: string;\n    signInButtonLabel?: ReactNode;\n    signOutCustomer(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onSignOut?(): void;\n    onSignOutError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n}\n\nconst WalletButtonPaymentMethodComponent: React.FC<WalletButtonPaymentMethodProps> = ({\n    paymentForm,\n    buttonId,\n    editButtonClassName,\n    editButtonLabel,\n    isInitializing = false,\n    method,\n    shouldShowEditButton,\n    signInButtonClassName,\n    signInButtonLabel,\n    signOutCustomer,\n    deinitializePayment,\n    initializePayment,\n    onSignOut = noop,\n    onSignOutError = noop,\n    onUnhandledError = noop,\n}) => {\n    const {\n        checkoutState: {\n            data: { getBillingAddress, getCheckout, isPaymentDataRequired },\n        },\n    } = useCheckout();\n\n    const billingAddress = getBillingAddress();\n    const checkout = getCheckout();\n\n    if (!billingAddress || !checkout) {\n        throw new Error('Unable to get checkout');\n    }\n\n    const walletPaymentData = normalizeWalletPaymentData(method.initializationData);\n    const isPaymentSelected = some(checkout.payments, { providerId: method.id });\n    // FIXME: I'm not sure how this would work for non-English names.\n    const cardName =\n        walletPaymentData && [billingAddress.firstName, billingAddress.lastName].join(' ');\n\n    const toggleSubmit = () => {\n        const { disableSubmit } = paymentForm;\n        const currentIsPaymentDataRequired = isPaymentDataRequired();\n\n        if (\n            normalizeWalletPaymentData(method.initializationData) ||\n            !currentIsPaymentDataRequired\n        ) {\n            disableSubmit(method, false);\n        } else {\n            disableSubmit(method, true);\n        }\n    };\n\n    const handleSignOut = useCallback(async () => {\n        try {\n            await signOutCustomer({ methodId: method.id });\n            onSignOut();\n            window.location.reload();\n        } catch (error) {\n            onSignOutError(error);\n        }\n    }, [signOutCustomer, method.id, onSignOut, onSignOutError]);\n\n    useEffect(() => {\n        const initializePaymentAsync = async () => {\n            toggleSubmit();\n\n            try {\n                await initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n            } catch (error) {\n                onUnhandledError(error);\n            }\n        };\n\n        void initializePaymentAsync();\n\n        return () => {\n            const deinitializePaymentAsync = async () => {\n                const { disableSubmit } = paymentForm;\n\n                disableSubmit(method, false);\n\n                try {\n                    await deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    onUnhandledError(error);\n                }\n            };\n\n            void deinitializePaymentAsync();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        toggleSubmit();\n    });\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isInitializing}>\n            <div className=\"paymentMethod paymentMethod--walletButton\">\n                {isPaymentSelected ? (\n                    <PaymentView\n                        {...walletPaymentData}\n                        buttonId={buttonId}\n                        cardName={cardName}\n                        editButtonClassName={editButtonClassName}\n                        editButtonLabel={editButtonLabel}\n                        method={method}\n                        onSignOut={handleSignOut}\n                        shouldShowEditButton={shouldShowEditButton}\n                    />\n                ) : (\n                    <SignInView\n                        buttonId={buttonId}\n                        method={method}\n                        signInButtonClassName={signInButtonClassName}\n                        signInButtonLabel={signInButtonLabel}\n                    />\n                )}\n            </div>\n        </LoadingOverlay>\n    );\n};\n\nexport default WalletButtonPaymentMethodComponent;\n"],"names":["forwardRef","ref","additionalClassName","isFloatingLabelEnabled","appearFocused","type","themeV2","rest","className","createInjectHoc","LocaleContext","displayNamePrefix","pickProps","value","key","height","viewBox","width","xmlns","d","testId","ReactDatePicker","lazy","memo","fieldType","id","name","onChange","noop","options","placeholder","date","inputDateFormat","inputFormat","handleDateChange","useCallback","dateValue","event","target","DynamicFormFieldType","DROPDOWM","map","label","optionValue","RADIO","length","RadioInput","checked","CHECKBOX","CheckboxInput","Array","isArray","includes","DATE","Suspense","autoComplete","calendarClassName","dateFormat","maxDate","max","Date","undefined","minDate","min","placeholderText","toUpperCase","popperClassName","selected","isDate","MULTILINE","TextInput","PASSWORD","htmlFor","labelContent","footer","input","renderField","props","errorId","kebabCase","render","description","isInitializing","initializePayment","method","onUnhandledError","deinitializePayment","isAddingNewInstrument","setIsAddingNewInstrument","useState","selectedInstrument","setSelectedInstrument","derivedProps","filterAccountInstruments","instruments","filter","filterTrustedInstruments","trustedShippingAddress","checkoutService","checkoutState","isUsingMultiShipping","data","getCart","getConfig","getCustomer","getInstruments","isPaymentDataRequired","isPaymentDataSubmitted","statuses","isLoadingInstruments","cart","config","customer","Error","currentMethodInstruments","trustedInstruments","isNewAddress","isInstrumentFeatureAvailable","gateway","paymentMethod","loadInstruments","getHostedPaymentMethodDerivedProps","isInstrumentFeatureAvailableProp","getDefaultInstrument","find","defaultInstrument","handleUseNewInstrument","handleSelectInstrument","bigpayToken","useEffect","gatewayId","methodId","error","currentSelectedInstrument","isLoading","shouldShowInstrumentFieldset","hideContentWhenLoading","A","onSelectInstrument","onUseNewInstrument","instrumentId","isAccountInstrument","onSelectedAll","onSelectedNone","handleSelectAllClick","preventDefault","handleSelectNoneClick","TranslatedString","href","onClick","MultiCheckboxFormField","form","values","errors","push","remove","handleSelectAll","checkedValues","difference","forEach","val","handleSelectNone","handleInputChange","indexOf","FormFieldContainer","hasError","DynamicInput","FormFieldError","renderProps","pick","field","secret","fieldLabel","required","maxLength","parentFieldName","inputId","autocomplete","extraClass","fieldInputId","fieldName","isFloatingLabelSupportedFieldType","Boolean","labelComponent","useMemo","labelClassName","Label","dynamicFormFieldType","NUMBER","TELEPHONE","TEXT","renderInput","items","helperLabel","rows","FormField","BraintreeAchFieldType","OwnershipTypes","AccountTypes","accountTypeOptions","Savings","Checking","ownershipTypeOptions","Personal","Business","defaultBraintreeAchFormFields","AccountType","custom","AccountNumber","RoutingNumber","OwnershipType","personalBraintreeAchFormFields","FirstName","LastName","businessBraintreeAchFormFields","BusinessName","currentInstrument","setCurrentInstrument","paymentForm","setFieldValue","accountInstruments","isAchInstrument","isGuest","isVaultingEnabled","shouldCreateNewInstrument","shouldConfirmInstrument","language","getValidationSchema","formFields","getFieldValue","requiredFieldErrorTranslationIds","reduce","schema","translate","matches","validateBraintreeAchForm","braintreeAchFormValues","accountNumber","businessName","routingNumber","ownershipType","firstName","lastName","validationSchema","setValidationSchema","isValidAccountNumber","isValidRoutingNumber","isValidFirstName","isValidLastName","isValidBusinessName","Promise","all","fields","isValid","isValidDepositoryName","resetFormValidation","getTranslatedLabelByFieldName","braintreeAchFormLabelsMap","accountType","Object","isBraintreeAchFormFieldName","fieldValues","handleChange","fieldId","DynamicFormField","updateMandateText","getFormValues","fullName","String","depositoryName","outstandingBalance","getCheckout","storeName","storeProfile","symbol","currency","mandateTextTranslationKey","formattedDate","now","toJSON","slice","split","reverse","join","mandateTextTranslationProps","toLowerCase","currentDate","mandateText","CheckboxFormField","isValidForm","setIsValidForm","disableSubmit","getBillingAddress","defaultFormValues","shouldSaveInstrument","shouldSetAsDefaultInstrument","orderConsent","entries","resetFormValues","shouldShowForm","shouldShowMandateTextCheckbox","validate","mandateTextConfirmationCheckboxValue","AccountInstrumentFieldset","StoreInstrumentFieldset","toResolvableComponent","currentMandateTextRef","useRef","integrations","braintreeach","getMandateText","current","isLoadingPaymentMethod","formContextProps","isSubmitted","setSubmitted","FormContext","Provider","CheckoutContext","LocaleProvider","PaymentFormContext","LoadingOverlay","currentMandateText","renderPayPalCardComponent","cardType","mapFromInstrumentCardType","brand","CreditCardIcon","last4","PoweredByPayPalFastlaneLabel","Button","result","size","Tiny","variant","Secondary","showPayPalCardSelector","getPaymentProviderCustomer","paymentProviderCustomer","paypalFastlaneCustomer","instrument","useBraintreeFastlaneInstruments","shouldShowInstrumentsForm","paypalFastlaneComponentRef","isInitializingPayment","braintreefastlane","onInit","onError","braintreelocalmethods","container","buttonText","brandName","onRenderButton","hidePaymentSubmitButton","submitForm","initializeBraintreePaypalPaymentMethod","defaultOptions","braintree","containerId","message","HostedPaymentComponent","initializeVisaCheckoutPayment","mergedOptions","braintreevisacheckout","onPaymentSelect","reinitializePayment","WalletButtonPaymentMethodComponent","buttonId","editButtonClassName","shouldShowEditButton","signInButtonClassName","signOutCustomer","PaymentMethodId","BraintreeVisaCheckout","checkoutSettings","isCardVaultingEnabled","formatAccountMask","accountMask","padding","object","card_information","cardData","isWalletButtonInitializationData","number","expiryMonth","expMonth","expiryYear","expYear","accountNum","card","expDate","substr","niceType","PaymentMethodType","getPaymentMethodName","translations","Affirm","Afterpay","AmazonPay","Bolt","Clearpay","GooglePay","Klarna","Paypal","PaypalCredit","VisaCheckout","getTranslatedPaymentMethodName","MultiOption","displayName","capitalize","get","onSignOut","providerName","cardName","editButtonLabel","signInButtonLabel","onSignOutError","billingAddress","checkout","walletPaymentData","initializationData","isPaymentSelected","some","payments","providerId","toggleSubmit","currentIsPaymentDataRequired","handleSignOut","window","location","reload"],"sourceRoot":""}