{"version":3,"file":"payment-method-v1-d62d06bd.js","mappings":"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","sources":["webpack://checkout/./packages/payment-integration-api/src/CaptureMessageComponent.tsx","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/no-payment-integration/src/no-payment-data-required-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/no-payment-integration/src/create-no-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/cardinal-integration/src/cardinal-three-d-secure-flow.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-vaulted-instrument.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/is-request-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-failed-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/cardinal-integration/src/cardinal.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/cardinal-integration/src/cardinal-client.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-client-unavailable-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/cardinal-integration/src/cardinal-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/payment-status-types.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/credit-card-integration/src/credit-card-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-pro-integration/src/paypal-pro-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-pro-integration/src/create-paypal-pro-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/external-integration/src/external-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/external-integration/src/is-additional-action.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/sezzle-integration/src/sezzle-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/sezzle-integration/src/create-sezzle-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/content-type.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/sdk-version-headers.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/storefront-payment-request-sender.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/internal-api-headers.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/zip-integration/src/zip-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/zip-integration/src/create-zip-payment-strategy.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethod.tsx"],"sourcesContent":["import { type ReactNode, useEffect } from 'react';\n\nimport { useCheckout } from './';\n\ninterface CaptureMessageComponentProps {\n    message: string;\n}\n\nexport const CaptureMessageComponent = ({ message }: CaptureMessageComponentProps): ReactNode => {\n    const { errorLogger } = useCheckout();\n\n    useEffect(() => {\n        if (!message || !errorLogger) {\n            return;\n        }\n\n        if (errorLogger.logMessage) {\n            errorLogger.logMessage(message);\n        } else {\n            // eslint-disable-next-line no-console\n            console.log(\n                `checkout-js attempted to log the following message: \"${message}\", but no Sentry logger is configured.`,\n            );\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [message]);\n\n    return null;\n};\n","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { omit } from 'lodash';\n\nimport {\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class NoPaymentDataRequiredPaymentStrategy implements PaymentStrategy {\n    constructor(private _paymentIntegrationService: PaymentIntegrationService) {}\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        await this._paymentIntegrationService.submitOrder(omit(payload, 'payment'), options);\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport NoPaymentDataRequiredPaymentStrategy from './no-payment-data-required-strategy';\n\nconst createNoPaymentStrategy: PaymentStrategyFactory<NoPaymentDataRequiredPaymentStrategy> = (\n    paymentIntegrationService,\n) => new NoPaymentDataRequiredPaymentStrategy(paymentIntegrationService);\n\nexport default toResolvableModule(createNoPaymentStrategy, [{ id: 'nopaymentdatarequired' }]);\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { merge, some } from 'lodash';\n\nimport {\n    HostedForm,\n    isRequestError,\n    isVaultedInstrument,\n    OrderRequestBody,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport CardinalClient, { CardinalOrderData } from './cardinal-client';\n\nexport default class CardinalThreeDSecureFlow {\n    constructor(\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _cardinalClient: CardinalClient,\n    ) {}\n\n    async prepare(method: PaymentMethod): Promise<void> {\n        await this._cardinalClient.load(method.id, method.config.testMode);\n        await this._cardinalClient.configure(await this._getClientToken(method));\n    }\n\n    async start(\n        execute: PaymentStrategy['execute'],\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n        hostedForm?: HostedForm,\n    ): Promise<void> {\n        const { getCardInstrument, getPaymentMethodOrThrow } =\n            this._paymentIntegrationService.getState();\n\n        const { payment: { methodId = '', paymentData = {} } = {} } = payload;\n        const instrument =\n            isVaultedInstrument(paymentData) && getCardInstrument(paymentData.instrumentId);\n        const bin = instrument ? instrument.iin : hostedForm && hostedForm.getBin();\n\n        if (bin) {\n            await this._cardinalClient.runBinProcess(bin);\n        }\n\n        try {\n            return await execute(\n                merge(payload, {\n                    payment: {\n                        paymentData: {\n                            threeDSecure: { token: getPaymentMethodOrThrow(methodId).clientToken },\n                        },\n                    },\n                }),\n                options,\n            );\n        } catch (error) {\n            if (\n                !isRequestError(error) ||\n                !some(error.body.errors, { code: 'three_d_secure_required' })\n            ) {\n                throw error;\n            }\n\n            const threeDSecure = await this._cardinalClient.getThreeDSecureData(\n                error.body.three_ds_result,\n                this._getOrderData(),\n            );\n\n            if (!hostedForm) {\n                await this._paymentIntegrationService.submitPayment(\n                    merge(payload.payment, {\n                        paymentData: { threeDSecure },\n                    }),\n                );\n\n                return;\n            }\n\n            await hostedForm.submit(\n                merge(payload.payment, {\n                    paymentData: { threeDSecure },\n                }),\n            );\n        }\n    }\n\n    private async _getClientToken(method: PaymentMethod): Promise<string> {\n        if (method.clientToken) {\n            return method.clientToken;\n        }\n\n        await this._paymentIntegrationService.loadPaymentMethod(method.id);\n\n        const paymentMethod = this._paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow(method.id);\n\n        return paymentMethod.clientToken || '';\n    }\n\n    private _getOrderData(): CardinalOrderData {\n        const state = this._paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n        const shippingAddress = state.getShippingAddress();\n        const checkout = state.getCheckoutOrThrow();\n        const order = state.getOrderOrThrow();\n\n        return {\n            billingAddress,\n            shippingAddress,\n            currencyCode: checkout.cart.currency.code,\n            id: order.orderId.toString(),\n            amount: checkout.cart.cartAmount,\n        };\n    }\n}\n","import {\n    FormattedPayload,\n    FormattedVaultedInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrumentPayload,\n    VaultedInstrument,\n} from './payment';\n\nexport default function isVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n\nexport function isHostedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is HostedVaultedInstrument {\n    return (\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccNumber') &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccCvv')\n    );\n}\n\nexport function isFormattedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is FormattedPayload<FormattedVaultedInstrument> {\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>)\n        .formattedPayload;\n\n    if (!formattedInstrument) {\n        return false;\n    }\n\n    return (\n        typeof formattedInstrument.bigpay_token === 'string' ||\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token)\n    );\n}\n","import RequestError from './request-error';\n\n// Have to use `as` https://stackoverflow.com/questions/73987044/typeguarding-an-unknown-nested-object should be fixed in 4.8+\nconst isRequestError = (error: unknown): error is RequestError => {\n    return typeof error === 'object' && error !== null && 'body' in error;\n};\n\nexport default isRequestError;\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method has thrown an unexpected error.',\n        );\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","import { ThreeDSecure, ThreeDSecureToken } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport const CardinalSignatureValidationErrors = [100004, 1010, 1011, 1020];\n\nexport interface CardinalSDK {\n    configure(params: CardinalConfiguration): void;\n    on(params: CardinalEventType, callback: CardinalEventMap[CardinalEventType]): void;\n    off(params: CardinalEventType): void;\n    setup<K extends keyof CardinalInitializationDataMap>(\n        initializationType: K,\n        initializationData: CardinalInitializationDataMap[K],\n    ): void;\n    trigger(\n        event: CardinalTriggerEvents,\n        data?: string,\n    ): Promise<CardinalBinProcessResponse | void>;\n    continue(\n        paymentBrand: CardinalPaymentBrand,\n        continueObject: CardinalContinue,\n        order: CardinalPartialOrder,\n    ): void;\n    start(paymentBrand: CardinalPaymentBrand, order: CardinalPartialOrder, jwt?: string): void;\n}\n\nexport interface CardinalWindow extends Window {\n    Cardinal?: CardinalSDK;\n}\n\nexport enum CardinalEventType {\n    SetupCompleted = 'payments.setupComplete',\n    Validated = 'payments.validated',\n}\n\nexport type setupCompleteFn = (setupCompleteData: CardinalSetupCompletedData) => void;\nexport type validatedFn = (data: CardinalValidatedData, jwt?: string) => void;\n\nexport interface CardinalEventMap {\n    [CardinalEventType.SetupCompleted]: setupCompleteFn;\n    [CardinalEventType.Validated]: validatedFn;\n}\n\nexport type CardinalConfiguration = Partial<{\n    logging: {\n        level: string;\n    };\n    payment: {\n        view: string;\n        framework: string;\n        displayLoading: boolean;\n    };\n}>;\n\nexport interface CardinalSetupCompletedData {\n    sessionId: string;\n    modules: CardinalModuleState[];\n}\n\nexport interface CardinalModuleState {\n    loaded: boolean;\n    module: string;\n}\n\nexport enum CardinalInitializationType {\n    Init = 'init',\n    Complete = 'complete',\n    Confirm = 'confirm',\n}\n\nexport interface CardinalInitializationDataMap {\n    [CardinalInitializationType.Init]: CardinalInitTypeData;\n    [CardinalInitializationType.Complete]: CardinalCompleteTypeData;\n    [CardinalInitializationType.Confirm]: CardinalConfirmTypeData;\n}\n\nexport interface CardinalInitTypeData {\n    jwt: string;\n}\n\nexport interface CardinalCompleteTypeData {\n    Status: string;\n}\n\nexport interface CardinalConfirmTypeData {\n    jwt: string;\n    cardinalResponseJwt: string;\n}\n\nexport interface CardinalValidatedData {\n    ActionCode?: CardinalValidatedAction;\n    ErrorDescription: string;\n    ErrorNumber: number;\n    Validated?: boolean;\n    Payment?: CardinalPayment;\n}\n\nexport interface CardinalPayment {\n    ExtendedData?: CardinalCCAExtendedData;\n    ProcessorTransactionId: string;\n    Type: CardinalPaymentType;\n}\n\nexport interface CardinalBinProcessResponse {\n    Status: boolean;\n}\n\nexport interface CardinalContinue {\n    AcsUrl: string;\n    Payload: string;\n}\n\nexport interface CardinalPartialOrder {\n    OrderDetails: CardinalOrderDetails;\n    Consumer?: CardinalConsumer;\n}\n\nexport interface CardinalConsumer {\n    Email1?: string;\n    Email2?: string;\n    ShippingAddress?: CardinalAddress;\n    BillingAddress?: CardinalAddress;\n    Account?: CardinalAccount;\n}\n\nexport interface CardinalAccount {\n    AccountNumber: number;\n    ExpirationMonth: number;\n    ExpirationYear: number;\n    NameOnAccount: string;\n    CardCode: number;\n}\n\nexport interface CardinalAddress {\n    FullName?: string;\n    FirstName: string;\n    MiddleName?: string;\n    LastName: string;\n    Address1: string;\n    Address2?: string;\n    Address3?: string;\n    City: string;\n    State: string;\n    PostalCode: string;\n    CountryCode: string;\n    Phone1?: string;\n    Phone2?: string;\n}\n\nexport interface CardinalOrderDetails {\n    OrderNumber: string;\n    Amount: number;\n    CurrencyCode: string;\n    OrderDescription?: string;\n    OrderChannel: string;\n    TransactionId?: string;\n}\n\nexport type CardinalCCAExtendedData = Partial<{\n    CAVV: string;\n    ECIFlag: string;\n    PAResStatus: string;\n    SignatureVerification: string;\n    XID: string;\n    UCAFIndicator: string;\n    ChallengeCancel: string;\n}>;\n\nexport enum CardinalValidatedAction {\n    Success = 'SUCCESS',\n    NoAction = 'NOACTION',\n    Failure = 'FAILURE',\n    Error = 'ERROR',\n}\n\nexport enum CardinalPaymentType {\n    CCA = 'CCA',\n    Paypal = 'Paypal',\n    Wallet = 'Wallet',\n    VisaCheckout = 'VisaCheckout',\n    ApplePay = 'ApplePay',\n    DiscoverWallet = 'DiscoverWallet',\n}\n\nexport enum CardinalTriggerEvents {\n    BinProcess = 'bin.process',\n}\n\nexport enum CardinalPaymentBrand {\n    CCA = 'cca',\n}\n\nexport enum CardinalSignatureVerification {\n    Yes = 'Y',\n    No = 'N',\n}\n\nexport type CardinalThreeDSecureToken = Pick<ThreeDSecure, 'xid'> | ThreeDSecureToken;\n","import { includes, noop } from 'lodash';\n\nimport {\n    Address,\n    BillingAddress,\n    CreditCardInstrument,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentMethodFailedError,\n    ThreeDSecureToken,\n    ThreeDsResult,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    CardinalAccount,\n    CardinalAddress,\n    CardinalConsumer,\n    CardinalEventType,\n    CardinalInitializationType,\n    CardinalPartialOrder,\n    CardinalPaymentBrand,\n    CardinalSDK,\n    CardinalSignatureValidationErrors,\n    CardinalSignatureVerification,\n    CardinalTriggerEvents,\n    CardinalValidatedAction,\n    CardinalValidatedData,\n} from './cardinal';\nimport CardinalScriptLoader from './cardinal-script-loader';\n\nexport type CardinalSupportedPaymentInstrument = CreditCardInstrument | VaultedInstrument;\n\nexport interface CardinalOrderData {\n    billingAddress: BillingAddress;\n    shippingAddress?: Address;\n    currencyCode: string;\n    id: string;\n    amount: number;\n    paymentData?: CreditCardInstrument;\n}\n\nexport default class CardinalClient {\n    private _provider = '';\n    private _testMode = false;\n    private _sdk?: Promise<CardinalSDK>;\n    private _configurationToken = '';\n\n    constructor(private _scriptLoader: CardinalScriptLoader) {}\n\n    load(provider: string, testMode = false): Promise<void> {\n        this._provider = provider;\n        this._testMode = testMode;\n\n        if (!this._sdk) {\n            this._sdk = this._scriptLoader.load(provider, testMode);\n        }\n\n        return this._sdk.then(noop);\n    }\n\n    configure(clientToken: string): Promise<void> {\n        if (this._configurationToken) {\n            if (this._configurationToken === clientToken) {\n                return Promise.resolve();\n            }\n\n            this._sdk = this._scriptLoader.load(`${this._provider}.${Date.now()}`, this._testMode);\n        }\n\n        return this._getClientSDK().then(\n            (client) =>\n                new Promise<void>((resolve, reject) => {\n                    client.on(CardinalEventType.SetupCompleted, () => {\n                        client.off(CardinalEventType.SetupCompleted);\n                        client.off(CardinalEventType.Validated);\n\n                        this._configurationToken = clientToken;\n\n                        resolve();\n                    });\n\n                    client.on(CardinalEventType.Validated, (data: CardinalValidatedData) => {\n                        client.off(CardinalEventType.SetupCompleted);\n                        client.off(CardinalEventType.Validated);\n\n                        switch (data.ActionCode) {\n                            case CardinalValidatedAction.Error:\n                                if (includes(CardinalSignatureValidationErrors, data.ErrorNumber)) {\n                                    reject(\n                                        new MissingDataError(\n                                            MissingDataErrorType.MissingPaymentMethod,\n                                        ),\n                                    );\n                                }\n\n                                reject(new PaymentMethodFailedError(data.ErrorDescription));\n                                break;\n                        }\n                    });\n\n                    client.setup(CardinalInitializationType.Init, {\n                        jwt: clientToken,\n                    });\n                }),\n        );\n    }\n\n    runBinProcess(binNumber: string): Promise<void> {\n        return this._getClientSDK()\n            .then((client) =>\n                client.trigger(CardinalTriggerEvents.BinProcess, binNumber).catch(noop),\n            )\n            .then((result) => {\n                if (!result || !result.Status) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n            });\n    }\n\n    getThreeDSecureData(\n        threeDSecureData: ThreeDsResult,\n        orderData: CardinalOrderData,\n    ): Promise<ThreeDSecureToken> {\n        return this._getClientSDK().then((client) => {\n            return new Promise<ThreeDSecureToken>((resolve, reject) => {\n                client.on(\n                    CardinalEventType.Validated,\n                    (data: CardinalValidatedData, jwt?: string) => {\n                        client.off(CardinalEventType.Validated);\n\n                        if (!jwt) {\n                            return reject(\n                                new PaymentMethodFailedError(\n                                    data.ErrorDescription\n                                        ? data.ErrorDescription\n                                        : 'An error was encountered while processing the transaction.',\n                                ),\n                            );\n                        }\n\n                        if (!data.ActionCode) {\n                            return resolve({ token: jwt });\n                        }\n\n                        switch (data.ActionCode) {\n                            case CardinalValidatedAction.Success:\n                                return resolve({ token: jwt });\n\n                            case CardinalValidatedAction.NoAction:\n                                if (data.ErrorNumber > 0) {\n                                    return reject(\n                                        new PaymentMethodFailedError(data.ErrorDescription),\n                                    );\n                                } else if (\n                                    !data.Payment ||\n                                    !data.Payment.ExtendedData ||\n                                    data.Payment.ExtendedData.SignatureVerification !==\n                                        CardinalSignatureVerification.Yes\n                                ) {\n                                    return reject(\n                                        new PaymentMethodFailedError(\n                                            'Transaction signature could not be validated.',\n                                        ),\n                                    );\n                                }\n\n                                return resolve({ token: jwt });\n\n                            case CardinalValidatedAction.Failure:\n                                return reject(\n                                    new PaymentMethodFailedError(\n                                        'User failed authentication or an error was encountered while processing the transaction.',\n                                    ),\n                                );\n\n                            case CardinalValidatedAction.Error:\n                                return reject(new PaymentMethodFailedError(data.ErrorDescription));\n                        }\n                    },\n                );\n\n                const continueObject = {\n                    AcsUrl: threeDSecureData.acs_url,\n                    Payload: threeDSecureData.merchant_data,\n                };\n\n                const partialOrder = this._mapToPartialOrder(\n                    orderData,\n                    threeDSecureData.payer_auth_request,\n                );\n\n                client.continue(CardinalPaymentBrand.CCA, continueObject, partialOrder);\n            });\n        });\n    }\n\n    private _mapToPartialOrder(\n        orderData: CardinalOrderData,\n        transactionId: string,\n    ): CardinalPartialOrder {\n        const consumer: CardinalConsumer = {\n            BillingAddress: this._mapToCardinalAddress(orderData.billingAddress),\n        };\n\n        if (orderData.paymentData) {\n            consumer.Account = this._mapToCardinalAccount(orderData.paymentData);\n        }\n\n        if (orderData.billingAddress.email) {\n            consumer.Email1 = orderData.billingAddress.email;\n        }\n\n        if (orderData.shippingAddress) {\n            consumer.ShippingAddress = this._mapToCardinalAddress(orderData.shippingAddress);\n        }\n\n        return {\n            Consumer: consumer,\n            OrderDetails: {\n                OrderNumber: orderData.id,\n                Amount: orderData.amount,\n                CurrencyCode: orderData.currencyCode,\n                OrderChannel: 'S',\n                TransactionId: transactionId,\n            },\n        };\n    }\n\n    private _mapToCardinalAccount(paymentData: CreditCardInstrument): CardinalAccount {\n        return {\n            AccountNumber: Number(paymentData.ccNumber),\n            ExpirationMonth: Number(paymentData.ccExpiry.month),\n            ExpirationYear: Number(paymentData.ccExpiry.year),\n            NameOnAccount: paymentData.ccName,\n            CardCode: Number(paymentData.ccCvv),\n        };\n    }\n\n    private _mapToCardinalAddress(address: Address): CardinalAddress {\n        const cardinalAddress: CardinalAddress = {\n            FirstName: address.firstName,\n            LastName: address.lastName,\n            Address1: address.address1,\n            City: address.city,\n            State: address.stateOrProvince,\n            PostalCode: address.postalCode,\n            CountryCode: address.countryCode,\n        };\n\n        if (address.address2) {\n            cardinalAddress.Address2 = address.address2;\n        }\n\n        if (address.phone) {\n            cardinalAddress.Phone1 = address.phone;\n        }\n\n        return cardinalAddress;\n    }\n\n    private _getClientSDK(): Promise<CardinalSDK> {\n        if (!this._sdk) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._sdk;\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { CardinalSDK, CardinalWindow } from './cardinal';\n\nconst SDK_TEST_URL = 'https://songbirdstag.cardinalcommerce.com/edge/v1/songbird.js';\nconst SDK_PROD_URL = 'https://songbird.cardinalcommerce.com/edge/v1/songbird.js';\n\nexport default class CardinalScriptLoader {\n    constructor(private _scriptLoader: ScriptLoader, private _window: CardinalWindow = window) {}\n\n    load(provider: string, testMode?: boolean): Promise<CardinalSDK> {\n        const url = testMode ? SDK_TEST_URL : SDK_PROD_URL;\n\n        return this._scriptLoader.loadScript(`${url}?v=${provider}`).then(() => {\n            if (!this._window.Cardinal) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return this._window.Cardinal;\n        });\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","enum PaymentStatusTypes {\n    ACKNOWLEDGE = 'ACKNOWLEDGE',\n    FINALIZE = 'FINALIZE',\n    INITIALIZE = 'INITIALIZE',\n}\n\nexport default PaymentStatusTypes;\n","import { isNil, values } from 'lodash';\n\nimport {\n    HostedForm,\n    InvalidArgumentError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithCreditCardPaymentInitializeOptions } from './credit-card-payment-initialize-options';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    protected _hostedForm?: HostedForm;\n    protected _shouldRenderHostedForm?: boolean;\n\n    constructor(protected _paymentIntegrationService: PaymentIntegrationService) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        return this._isHostedPaymentFormEnabled(\n            payload.payment?.methodId,\n            payload.payment?.gatewayId,\n        ) && this._shouldRenderHostedForm\n            ? this._executeWithHostedForm(payload, options)\n            : this._executeWithoutHostedForm(payload, options);\n    }\n\n    initialize(\n        options?: PaymentInitializeOptions & WithCreditCardPaymentInitializeOptions,\n    ): Promise<void> {\n        if (\n            !this._isHostedPaymentFormEnabled(options?.methodId, options?.gatewayId) ||\n            !this._isHostedFieldAvailable(options)\n        ) {\n            this._shouldRenderHostedForm = false;\n\n            return Promise.resolve();\n        }\n\n        const formOptions = options && options.creditCard && options.creditCard.form;\n        const state = this._paymentIntegrationService.getState();\n        const { paymentSettings: { bigpayBaseUrl: host = '' } = {} } =\n            state.getStoreConfigOrThrow();\n\n        if (!formOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        const form = this._paymentIntegrationService.createHostedForm(host, formOptions);\n\n        return form.attach().then(() => {\n            this._shouldRenderHostedForm = true;\n            this._hostedForm = form;\n\n            return Promise.resolve();\n        });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._hostedForm) {\n            this._hostedForm.detach();\n        }\n\n        return Promise.resolve();\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    protected async _executeWithoutHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        await this._paymentIntegrationService.submitPayment({ ...payment, paymentData });\n    }\n\n    protected async _executeWithHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const form = this._hostedForm;\n\n        if (!form) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payment || !payment.methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        await form.validate().then(() => form.submit(payment));\n    }\n\n    protected _isHostedPaymentFormEnabled(methodId?: string, gatewayId?: string): boolean {\n        if (!methodId) {\n            return false;\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId, gatewayId);\n\n        return paymentMethod.config.isHostedFormEnabled === true;\n    }\n\n    private _isHostedFieldAvailable(\n        options?: PaymentInitializeOptions & WithCreditCardPaymentInitializeOptions,\n    ): boolean {\n        return !values(options && options.creditCard && options.creditCard.form.fields).every(\n            isNil,\n        );\n    }\n}\n","import { CardinalThreeDSecureFlow } from '@bigcommerce/checkout-sdk/cardinal-integration';\nimport { CreditCardPaymentStrategy } from '@bigcommerce/checkout-sdk/credit-card-integration';\nimport {\n    OrderRequestBody,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStatusTypes,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class PaypalProPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        protected paymentIntegrationService: PaymentIntegrationService,\n        private threeDSecureFlow: CardinalThreeDSecureFlow,\n    ) {\n        super(paymentIntegrationService);\n    }\n\n    async initialize(options: PaymentInitializeOptions): Promise<void> {\n        await super.initialize(options);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(options.methodId);\n\n        if (paymentMethod.config.is3dsEnabled) {\n            await this.threeDSecureFlow.prepare(paymentMethod);\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment: { methodId = '' } = {} } = payload;\n\n        const state = this.paymentIntegrationService.getState();\n\n        if (state.getPaymentStatus() === PaymentStatusTypes.ACKNOWLEDGE) {\n            await this.paymentIntegrationService.submitOrder(\n                {\n                    ...payload,\n                    payment: { methodId },\n                },\n                options,\n            );\n\n            return Promise.resolve();\n        }\n\n        if (state.getPaymentMethodOrThrow(methodId).config.is3dsEnabled) {\n            return this.threeDSecureFlow.start(\n                super.execute.bind(this),\n                payload,\n                options,\n                this._hostedForm,\n            );\n        }\n\n        return super.execute(payload, options);\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CardinalClient,\n    CardinalScriptLoader,\n    CardinalThreeDSecureFlow,\n} from '@bigcommerce/checkout-sdk/cardinal-integration';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PaypalProPaymentStrategy from './paypal-pro-payment-strategy';\n\nconst createPayPalProPaymentStrategy: CheckoutButtonStrategyFactory<PaypalProPaymentStrategy> = (\n    paymentIntegrationService,\n) =>\n    new PaypalProPaymentStrategy(\n        paymentIntegrationService,\n        new CardinalThreeDSecureFlow(\n            paymentIntegrationService,\n            new CardinalClient(new CardinalScriptLoader(getScriptLoader())),\n        ),\n    );\n\nexport default toResolvableModule(createPayPalProPaymentStrategy, [{ id: 'paypal' }]);\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    isRequestError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { AdditionalActionRequired, isAdditionalActionRequired } from './is-additional-action';\n\nexport default class ExternalPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _formPoster: FormPoster,\n        private _paymentIntegrationService: PaymentIntegrationService,\n    ) {}\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        try {\n            await this._paymentIntegrationService.submitPayment({ ...payment, paymentData });\n        } catch (error) {\n            if (\n                !isRequestError(error) ||\n                !isAdditionalActionRequired(error.body) ||\n                !this._isAdditionalActionRequired(error.body)\n            ) {\n                return Promise.reject(error);\n            }\n\n            const {\n                body: {\n                    additional_action_required: {\n                        data: { redirect_url },\n                    },\n                },\n            } = error;\n\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            return new Promise(() => {\n                this.redirectUrl(redirect_url);\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            }) as any;\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    protected redirectUrl(redirect_url: string): void {\n        return this._formPoster.postForm(redirect_url, {});\n    }\n\n    private _isAdditionalActionRequired(body: AdditionalActionRequired): boolean {\n        const { additional_action_required, status } = body;\n\n        return (\n            status === 'additional_action_required' &&\n            additional_action_required &&\n            additional_action_required.type === 'offsite_redirect'\n        );\n    }\n}\n","export interface AdditionalActionRequired {\n    additional_action_required: {\n        data: {\n            redirect_url: string;\n        };\n        type: string;\n    };\n    status: string;\n}\n\nexport function isAdditionalActionRequired(value: unknown): value is AdditionalActionRequired {\n    return typeof value === 'object' && value !== null && 'additional_action_required' in value;\n}\n","import { ExternalPaymentStrategy } from '@bigcommerce/checkout-sdk/external-integration';\n\nexport default class SezzlePaymentStrategy extends ExternalPaymentStrategy {\n    protected redirectUrl(url: string): void {\n        window.location.replace(url);\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport SezzlePaymentStrategy from './sezzle-payment-strategy';\n\nconst createSezzlePaymentStrategy: PaymentStrategyFactory<SezzlePaymentStrategy> = (\n    paymentIntegrationService,\n) => new SezzlePaymentStrategy(createFormPoster(), paymentIntegrationService);\n\nexport default toResolvableModule(createSezzlePaymentStrategy, [{ id: 'sezzle' }]);\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","export const SDK_VERSION_HEADERS = { 'X-Checkout-SDK-Version': LIBRARY_VERSION };\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, SDK_VERSION_HEADERS } from '../common/http-request';\n\nexport default class StorefrontPaymentRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    async saveExternalId(methodId: string, token: string): Promise<void> {\n        const url = `/api/storefront/payment/${methodId}/save-external-id`;\n        const options = {\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n            body: {\n                externalId: token,\n                provider: methodId,\n            },\n        };\n\n        await this._requestSender.post<void>(url, options);\n    }\n}\n","export const INTERNAL_USE_ONLY =\n    'This API endpoint is for internal use only and may change in the future';\n","import {\n    isRequestError,\n    MissingDataError,\n    MissingDataErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    StorefrontPaymentRequestSender,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class ZipPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private storefrontPaymentRequestSender: StorefrontPaymentRequestSender,\n    ) {}\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId } = payment;\n        const { getPaymentMethodOrThrow } = await this.paymentIntegrationService.loadPaymentMethod(\n            methodId,\n            options,\n        );\n\n        const {\n            clientToken,\n            initializationData,\n        }: { clientToken?: string; initializationData?: { redirectUrl?: string } } =\n            getPaymentMethodOrThrow(methodId);\n        const redirectUrl = initializationData?.redirectUrl;\n\n        if (!clientToken || !redirectUrl) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { id: nonce } = JSON.parse(clientToken);\n\n        if (!nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        const { isStoreCreditApplied: useStoreCredit } = this.paymentIntegrationService\n            .getState()\n            .getCheckoutOrThrow();\n\n        await this.paymentIntegrationService.applyStoreCredit(useStoreCredit);\n        await this.paymentIntegrationService.initializePayment(methodId, { useStoreCredit });\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n        await this._prepareForReferredRegistration(methodId, nonce);\n\n        try {\n            await this.paymentIntegrationService.submitPayment({\n                methodId,\n                paymentData: { nonce },\n            });\n        } catch (error) {\n            if (isRequestError(error) && error.body.status === 'additional_action_required') {\n                return new Promise(() => window.location.replace(redirectUrl));\n            }\n\n            throw error;\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _prepareForReferredRegistration(methodId: string, externalId: string): Promise<void> {\n        return this.storefrontPaymentRequestSender.saveExternalId(methodId, externalId);\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentStrategyFactory,\n    StorefrontPaymentRequestSender,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ZipPaymentStrategy from './zip-payment-strategy';\n\nconst createZipPaymentStrategy: PaymentStrategyFactory<ZipPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n    const requestSender = createRequestSender({ host: getHost() });\n    const storefrontPaymentRequestSender = new StorefrontPaymentRequestSender(requestSender);\n\n    return new ZipPaymentStrategy(paymentIntegrationService, storefrontPaymentRequestSender);\n};\n\nexport default toResolvableModule(createZipPaymentStrategy, [{ id: 'zip' }, { id: 'quadpay' }]);\n","import {\n    type CheckoutSelectors,\n    type CustomerInitializeOptions,\n    type CustomerRequestOptions,\n    type PaymentInitializeOptions,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { createNoPaymentStrategy, } from '@bigcommerce/checkout-sdk/integrations/no-payment';\nimport { createPayPalProPaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/paypal-pro';\nimport { createSezzlePaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/sezzle';\nimport { createTDOnlineMartPaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/td-bank';\nimport { createZipPaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/zip';\nimport React, { type FunctionComponent, lazy, memo, Suspense } from 'react';\n\nimport { CaptureMessageComponent, type CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\n\nconst BraintreeCreditCardPaymentMethod = lazy(() => import(/* webpackChunkName: \"braintree-credit-card-payment-method\" */'./BraintreeCreditCardPaymentMethod'));\nconst HostedCreditCardPaymentMethod = lazy(() => import(/* webpackChunkName: \"hosted-credit-card-payment-method\" */'./HostedCreditCardPaymentMethod'));\nconst HostedPaymentMethod = lazy(() => import(/* webpackChunkName: \"hosted-payment-method\" */'./HostedPaymentMethod'));\n\nimport PaymentMethodId from './PaymentMethodId';\nimport PaymentMethodProviderType from './PaymentMethodProviderType';\nimport PaymentMethodType from './PaymentMethodType';\n\nexport interface PaymentMethodProps {\n    method: PaymentMethod;\n    isEmbedded?: boolean;\n    isUsingMultiShipping?: boolean;\n    onUnhandledError?(error: Error): void;\n    submitForm?(): void;\n}\n\nexport interface WithCheckoutPaymentMethodProps {\n    isInitializing: boolean;\n    deinitializeCustomer(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializeCustomer(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n}\n\n/**\n * If possible, try to avoid having components that are specific to a specific\n * payment provider or method. Instead, try to generalise the requirements and\n * use components that can are reusable for multiple payment methods. i.e.:\n * CreditCardPaymentMethod, HostedPaymentMethod etc... If it is really necessary\n * for a particular payment method, you may write a method-specific component for\n * the purpose of configuring a general-purpose component in order to fulfill\n * its specific product or technical requirements.\n */\nconst PaymentMethodComponent: FunctionComponent<\n    PaymentMethodProps & WithCheckoutPaymentMethodProps\n> = (props) => {\n    const { method } = props;\n\n    if (method.id === PaymentMethodId.Braintree) {\n        return <Suspense><BraintreeCreditCardPaymentMethod {...props} /></Suspense>;\n    }\n\n    if (\n        method.id === PaymentMethodId.Humm ||\n        method.id === PaymentMethodId.Laybuy ||\n        method.method === PaymentMethodType.Paypal ||\n        method.method === PaymentMethodType.PaypalCredit ||\n        method.type === PaymentMethodProviderType.Hosted\n    ) {\n        const knownMethods = [\n            { id: \"braintreepaypalcredit\", gateway: null, method: \"paypal-credit\", type: PaymentMethodProviderType.Api },\n        ];\n\n        let sentryMessage: string;\n\n        if (knownMethods.some(knownMethod =>\n            knownMethod.id === method.id &&\n            knownMethod.gateway === method.gateway &&\n            knownMethod.method === method.method &&\n            knownMethod.type === method.type\n        )) {\n            sentryMessage = '';\n        }else {\n            sentryMessage = `DataHostedPaymentMethod ${JSON.stringify(method)}`;\n        }\n\n        return <>\n                <CaptureMessageComponent message={sentryMessage} />\n                <Suspense><HostedPaymentMethod {...props} /></Suspense>\n            </>;\n    }\n\n    // NOTE: Some payment methods have `method` as `credit-card` but they are\n    // actually not. Therefore, as a workaround, we are doing the following\n    // check last.\n    if (\n        method.method === PaymentMethodType.CreditCard ||\n        method.type === PaymentMethodProviderType.Api\n    ) {\n        const knownMethods = [\n            { id: 'authorizenet', gateway: null, method: PaymentMethodType.CreditCard, type: PaymentMethodProviderType.Api },\n            { id: 'clover', gateway: null, method: PaymentMethodType.CreditCard, type: PaymentMethodProviderType.Api },\n            { id: 'cba_mpgs', gateway: null, method: PaymentMethodType.CreditCard, type: PaymentMethodProviderType.Api },\n            { id: 'cybersourcev2', gateway: null, method: PaymentMethodType.CreditCard, type: PaymentMethodProviderType.Api },\n            { id: 'ewayrapid', gateway: null, method: PaymentMethodType.CreditCard, type: PaymentMethodProviderType.Api },\n            { id: 'hps', gateway: null, method: PaymentMethodType.CreditCard, type: PaymentMethodProviderType.Api },\n            { id: 'nmi', gateway: null, method: PaymentMethodType.CreditCard, type: PaymentMethodProviderType.Api },\n            { id: 'quickbooks', gateway: null, method: PaymentMethodType.CreditCard, type: PaymentMethodProviderType.Api },\n            { id: 'sagepay', gateway: null, method: PaymentMethodType.CreditCard, type: PaymentMethodProviderType.Api },\n            { id: 'stripe', gateway: null, method: PaymentMethodType.CreditCard, type: PaymentMethodProviderType.Api },\n            { id: 'usaepay', gateway: null, method: PaymentMethodType.CreditCard, type: PaymentMethodProviderType.Api },\n            { id: 'vantiv', gateway: null, method: PaymentMethodType.CreditCard, type: PaymentMethodProviderType.Api },\n            { id: 'orbital', gateway: null, method: PaymentMethodType.CreditCard, type: PaymentMethodProviderType.Api },\n            { id: 'elavon', gateway: null, method: PaymentMethodType.CreditCard, type: PaymentMethodProviderType.Api },\n            { id: 'firstdatae4v14', gateway: null, method: PaymentMethodType.CreditCard, type: PaymentMethodProviderType.Api },\n            { id: 'cybersource', gateway: null, method: PaymentMethodType.CreditCard, type: PaymentMethodProviderType.Api },\n            { id: 'migs', gateway: null, method: PaymentMethodType.CreditCard, type: PaymentMethodProviderType.Api },\n            { id: 'vantivcore', gateway: null, method: PaymentMethodType.CreditCard, type: PaymentMethodProviderType.Api },\n            { id: 'bnz', gateway: null, method: PaymentMethodType.CreditCard, type: PaymentMethodProviderType.Api },\n            { id: 'shopkeep', gateway: null, method: PaymentMethodType.CreditCard, type: PaymentMethodProviderType.Api },\n            { id: 'paymetric', gateway: null, method: PaymentMethodType.CreditCard, type: PaymentMethodProviderType.Api },\n            { id: 'googlepay', gateway: null, method: PaymentMethodType.GooglePay, type: PaymentMethodProviderType.Api },\n            { id: \"eway\", gateway:null, method:PaymentMethodType.CreditCard, type:PaymentMethodProviderType.Api },\n            { id: \"wepay\", gateway: null, method: PaymentMethodType.CreditCard, type: PaymentMethodProviderType.Api },\n            { id: \"stripev3\", gateway: null, method: \"multi-option\", type: PaymentMethodProviderType.Api },\n            { id: 'bigpaypay', gateway: null, method: 'zzzblackhole', type: PaymentMethodProviderType.Api },\n            { id: 'testgateway', gateway: null, method: 'zzzblackhole', type: PaymentMethodProviderType.Api },\n            { id: 'afterpay', gateway: null, method: 'pay_by_installment', type: PaymentMethodProviderType.Api },\n        ];\n\n        let sentryMessage: string;\n\n        if (knownMethods.some(knownMethod =>\n            knownMethod.id === method.id &&\n            knownMethod.gateway === method.gateway &&\n            knownMethod.method === method.method &&\n            knownMethod.type === method.type\n        )) {\n            sentryMessage = '';\n        }else {\n            sentryMessage = `DataHostedCreditCardPaymentMethodUpdated ${JSON.stringify(method)}`;\n        }\n\n        return <>\n                <CaptureMessageComponent message={sentryMessage} />\n                <Suspense><HostedCreditCardPaymentMethod {...props} /></Suspense>\n            </>;\n    }\n\n    return null;\n};\n\nfunction mapToWithCheckoutPaymentMethodProps(\n    { checkoutService, checkoutState }: CheckoutContextProps,\n    { method }: PaymentMethodProps,\n): WithCheckoutPaymentMethodProps {\n    const {\n        statuses: { isInitializingPayment },\n    } = checkoutState;\n\n    return {\n        deinitializeCustomer: checkoutService.deinitializeCustomer,\n        deinitializePayment: checkoutService.deinitializePayment,\n        initializeCustomer: checkoutService.initializeCustomer,\n        initializePayment: (options) => {\n            return checkoutService.initializePayment({\n                ...options,\n                integrations: [\n                    ...options.integrations ?? [],\n                    // The strategies below don’t appear to correspond to any existing component,\n                    // so they are initialized globally at the root level.\n                    createNoPaymentStrategy,\n                    createPayPalProPaymentStrategy,\n                    createSezzlePaymentStrategy,\n                    createTDOnlineMartPaymentStrategy,\n                    createZipPaymentStrategy,\n                ],\n            });\n        },\n        isInitializing: isInitializingPayment(method.id),\n    };\n}\n\nexport default withCheckout(mapToWithCheckoutPaymentMethodProps)(memo(PaymentMethodComponent));\n"],"names":["CaptureMessageComponent","message","errorLogger","useEffect","logMessage","console","log","StandardError","Error","constructor","prototype","super","name","type","Object","setPrototypeOf","this","__proto__","captureStackTrace","stack","OrderFinalizationNotRequiredError","NoPaymentDataRequiredPaymentStrategy","_paymentIntegrationService","execute","payload","options","submitOrder","omit","finalize","Promise","reject","initialize","resolve","deinitialize","module","paymentIntegrationService","resolveIds","id","assign","MissingDataErrorType","NotInitializedErrorType","CardinalThreeDSecureFlow","_cardinalClient","prepare","method","load","config","testMode","configure","_getClientToken","start","hostedForm","getCardInstrument","getPaymentMethodOrThrow","getState","payment","methodId","paymentData","instrument","Boolean","instrumentId","bin","iin","getBin","runBinProcess","merge","threeDSecure","token","clientToken","error","some","body","errors","code","getThreeDSecureData","three_ds_result","_getOrderData","submitPayment","submit","loadPaymentMethod","state","billingAddress","getBillingAddressOrThrow","shippingAddress","getShippingAddress","checkout","getCheckoutOrThrow","order","getOrderOrThrow","currencyCode","cart","currency","orderId","toString","amount","cartAmount","MissingBillingAddress","MissingCart","MissingCheckout","MissingConsignments","MissingCustomer","MissingCheckoutConfig","MissingOrder","MissingOrderConfig","MissingOrderId","MissingPayment","MissingPaymentId","MissingPaymentInstrument","MissingPaymentMethod","MissingPaymentRedirectUrl","MissingPaymentStatus","MissingPaymentToken","MissingShippingAddress","MissingDataError","subtype","PaymentMethodFailedError","CheckoutButtonNotInitialized","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","NotInitializedError","CardinalSignatureValidationErrors","CardinalEventType","CardinalInitializationType","CardinalValidatedAction","CardinalPaymentType","CardinalTriggerEvents","CardinalPaymentBrand","CardinalSignatureVerification","SetupCompleted","Validated","Init","Complete","Confirm","Success","NoAction","Failure","CCA","Paypal","Wallet","VisaCheckout","ApplePay","DiscoverWallet","BinProcess","Yes","No","CardinalClient","_scriptLoader","_provider","_testMode","_configurationToken","provider","_sdk","then","noop","Date","now","_getClientSDK","client","on","off","data","ActionCode","includes","ErrorNumber","ErrorDescription","setup","jwt","binNumber","trigger","catch","result","Status","threeDSecureData","orderData","Payment","ExtendedData","SignatureVerification","continueObject","AcsUrl","acs_url","Payload","merchant_data","partialOrder","_mapToPartialOrder","payer_auth_request","continue","transactionId","consumer","BillingAddress","_mapToCardinalAddress","Account","_mapToCardinalAccount","email","Email1","ShippingAddress","Consumer","OrderDetails","OrderNumber","Amount","CurrencyCode","OrderChannel","TransactionId","AccountNumber","Number","ccNumber","ExpirationMonth","ccExpiry","month","ExpirationYear","year","NameOnAccount","ccName","CardCode","ccCvv","address","cardinalAddress","FirstName","firstName","LastName","lastName","Address1","address1","City","city","State","stateOrProvince","PostalCode","postalCode","CountryCode","countryCode","address2","Address2","phone","Phone1","PaymentMethodClientUnavailableError","CardinalScriptLoader","_window","window","url","loadScript","Cardinal","InvalidArgumentError","PaymentArgumentInvalidError","invalidFields","join","PaymentStatusTypes","CreditCardPaymentStrategy","_isHostedPaymentFormEnabled","gatewayId","_shouldRenderHostedForm","_executeWithHostedForm","_executeWithoutHostedForm","_isHostedFieldAvailable","formOptions","creditCard","form","paymentSettings","bigpayBaseUrl","host","getStoreConfigOrThrow","createHostedForm","attach","_hostedForm","detach","validate","isHostedFormEnabled","values","fields","every","isNil","ACKNOWLEDGE","FINALIZE","INITIALIZE","PaypalProPaymentStrategy","threeDSecureFlow","paymentMethod","is3dsEnabled","getPaymentStatus","bind","getScriptLoader","ExternalPaymentStrategy","_formPoster","value","_isAdditionalActionRequired","additional_action_required","redirect_url","redirectUrl","postForm","status","SezzlePaymentStrategy","location","replace","createFormPoster","ContentType","Json","JsonV1","SDK_VERSION_HEADERS","StorefrontPaymentRequestSender","_requestSender","saveExternalId","headers","Accept","externalId","post","ZipPaymentStrategy","storefrontPaymentRequestSender","initializationData","nonce","JSON","parse","isStoreCreditApplied","useStoreCredit","applyStoreCredit","initializePayment","_prepareForReferredRegistration","getHost","requestSender","createRequestSender","BraintreeCreditCardPaymentMethod","lazy","HostedCreditCardPaymentMethod","HostedPaymentMethod","withCheckout","checkoutService","checkoutState","statuses","isInitializingPayment","deinitializeCustomer","deinitializePayment","initializeCustomer","integrations","isInitializing","memo","props","PaymentMethodId","Braintree","Suspense","Humm","Laybuy","PaymentMethodType","PaypalCredit","PaymentMethodProviderType","Hosted","sentryMessage","gateway","Api","knownMethod","stringify","CreditCard","GooglePay"],"sourceRoot":""}